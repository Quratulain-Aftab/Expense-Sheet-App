// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import AVFoundation;
@import UIKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import GLKit;
@import CoreImage;
@import OpenGLES;
#endif

#import <imglyKit/imglyKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface AVCaptureDevice (SWIFT_EXTENSION(imglyKit))
@end

@class UIColor;
@class NSCoder;

/**
  A \code
  BorderedCollectionViewCell
  \endcode is a cell that shows a border around the cell.
*/
SWIFT_CLASS_NAMED("BorderedCollectionViewCell")
@interface IMGLYBorderedCollectionViewCell : UICollectionViewCell
/**
  The color of the border.
*/
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)tintColorDidChange;
/**
  :nodoc:
*/
@property (nonatomic, setter=setSelected:) BOOL isSelected;
/**
  :nodoc:
*/
@property (nonatomic, setter=setHighlighted:) BOOL isHighlighted;
@end

@class UIActivityIndicatorView;

/**
  An \code
  ActivityBorderedCollectionViewCell
  \endcode is a cell that shows a border around the cell and an
  activity indicator in its center.
*/
SWIFT_CLASS_NAMED("ActivityBorderedCollectionViewCell")
@interface IMGLYActivityBorderedCollectionViewCell : IMGLYBorderedCollectionViewCell
/**
  An activity indicator in the center of the cell.
*/
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Nonnull activityIndicator;
/**
  :nodoc:
*/
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/**
  The tools that can be used in an instance of \code
  AdjustToolController
  \endcode.
  <ul>
    <li>
      Brightness: Change the brightness of the image.
    </li>
    <li>
      Contrast:   Change the contrast of the image.
    </li>
    <li>
      Saturation: Change the saturation of the image.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, AdjustTool) {
/**
  Change the brightness of the image.
*/
  AdjustToolBrightness = 0,
/**
  Change the contrast of the image.
*/
  AdjustToolContrast = 1,
/**
  Change the saturation of the image.
*/
  AdjustToolSaturation = 2,
/**
  Change the shadows of the image.
*/
  AdjustToolShadows = 3,
/**
  Change the highlights of the image.
*/
  AdjustToolHighlights = 4,
/**
  Change the exposure of the image.
*/
  AdjustToolExposure = 5,
/**
  Change the clarity of the image.
*/
  AdjustToolClarity = 6,
};

@class IMGLYConfiguration;
@class IMGLYToolbarItem;
@class NSBundle;
@protocol IMGLYPhotoEditToolControllerDelegate;

/**
  A \code
  PhotoEditToolController
  \endcode is the base class for any tool controllers. Subclass this class if you
  want to add additional tools to the editor.
*/
SWIFT_CLASS_NAMED("PhotoEditToolController")
@interface IMGLYPhotoEditToolController : UIViewController
/**
  The render mode that the preview image should be rendered with when this tool is active.
*/
@property (nonatomic) IMGLYRenderMode preferredRenderMode;
/**
  The configuration object that configures this tool.
*/
@property (nonatomic, readonly, strong) IMGLYConfiguration * _Nonnull configuration;
/**
  The \code
  delegate
  \endcode for the tool controller.
*/
@property (nonatomic, readonly, weak) id <IMGLYPhotoEditToolControllerDelegate> _Nullable delegate;
/**
  Creates a new photo edit tool controller with the given configuration.
  \param configuration The configuration options to apply.


  returns:
  The initialized and configured photo edit tool controller object.
*/
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/**
  :nodoc:
*/
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/**
  If set to \code
  true
  \endcode, the default preview view is used. If set to \code
  false
  \endcode, the default preview view
  is hidden and you are responsible for displaying the image.
*/
@property (nonatomic, readonly) BOOL wantsDefaultPreviewView;
/**
  The scale factor that should be applied to the main preview view when this tool is on top of the stack.
  Defaults to \code
  1.0
  \endcode.
*/
@property (nonatomic, readonly) CGFloat preferredDefaultPreviewViewScale;
/**
  If set to \code
  true
  \endcode, scrolling in the default preview view is enabled while this tool is on top of the stack.
  Defaults to \code
  false
  \endcode.
*/
@property (nonatomic, readonly) BOOL wantsScrollingInDefaultPreviewViewEnabled;
/**
  The background color that should be used when this tool is active.
*/
@property (nonatomic, readonly, strong) UIColor * _Nullable preferredPreviewBackgroundColor;
/**
  The insets that should be applied to the preview view when this tool is active.
*/
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
/**
  The toolbar configuration item.
*/
@property (nonatomic, readonly, strong) IMGLYToolbarItem * _Nonnull toolbarItem;
/**
  Called when the photo edit model changes.
*/
- (void)photoEditModelDidChange;
/**
  Notifies the tool controller that it is about to become the active tool.
  important:
  If you override this method, you must call \code
  super
  \endcode at some point in your implementation.
*/
- (void)willBecomeActiveTool;
/**
  Notifies the tool controller that it became the active tool.
  important:
  If you override this method, you must call \code
  super
  \endcode at some point in your implementation.
*/
- (void)didBecomeActiveTool;
/**
  Notifies the tool controller that it is about to resign being the active tool.
  note:
  This method will <em>not</em> be called if another tool is pushed above this tool.
  It is only called if you pop the tool from the tool stack controller.
  important:
  If you override this method, you must call \code
  super
  \endcode at some point in your implementation.
*/
- (void)willResignActiveTool;
/**
  Notifies the tool controller that it resigned being the active tool.
  note:
  This method will <em>not</em> be called if another tool is pushed above this tool.
  It is only called if you pop the tool from the tool stack controller.
  important:
  If you override this method, you must call \code
  super
  \endcode at some point in your implementation.
*/
- (void)didResignActiveTool;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIView;

/**
  A \code
  StackLayoutToolController
  \endcode presents a workspace view at the top and an accessory view at the
  bottom. The accessory view is usually used for the menu, while the workspace view hosts any
  other controls.
*/
SWIFT_CLASS_NAMED("StackLayoutToolController")
@interface IMGLYStackLayoutToolController : IMGLYPhotoEditToolController
/**
  The workspace view. If you want to add any controls to your tool, you will most likely add
  them to this view.
*/
@property (nonatomic, strong) UIView * _Nonnull workspaceView;
/**
  The accessory view. This view usually only hosts the menu.
*/
@property (nonatomic, strong) UIView * _Nonnull accessoryView;
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)updateViewConstraints;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/**
  An \code
  AdjustToolController
  \endcode is reponsible for displaying the UI to adjust the brightness, contrast and saturation
  of an image.
*/
SWIFT_CLASS_NAMED("AdjustToolController")
@interface IMGLYAdjustToolController : IMGLYStackLayoutToolController
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)updateViewConstraints;
/**
  :nodoc:
*/
- (void)photoEditModelDidChange;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;
@class UICollectionViewLayout;

@interface IMGLYAdjustToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>
/**
  :nodoc:
*/
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYAdjustToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYAdjustToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYAdjustToolController (SWIFT_EXTENSION(imglyKit))
@end

@class IMGLYButton;
@class IMGLYToolControllerOptionsBuilder;

/**
  Options for configuring a \code
  PhotoEditToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("ToolControllerOptions")
@interface IMGLYToolControllerOptions : NSObject
/**
  The background color of the accessory view. Unless this is set the configuration’s global background color,
  will be used.
*/
@property (nonatomic, readonly, strong) UIColor * _Nullable accessoryViewBackgroundColor;
/**
  A configuration closure to configure the toolbars title view.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/**
  The tool’s background color. Defaults to the configuration’s global background color.
*/
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/**
  A configuration closure to configure the apply button displayed at the bottom right.
  Defaults to a checkmark icon.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable applyButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  A configuration closure to configure the discard button displayed at the bottom left.
  Defaults to a cross icon.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable discardButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  This closure will be called when a tool has been entered.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable didEnterToolClosure)(void);
/**
  The closure will be called when a tool is about to be left.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable willLeaveToolClosure)(void);
/**
  Returns a newly allocated instance of a \code
  ToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of a \code
  ToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of a \code
  ToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  ToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of a \code
  ToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder OBJC_DESIGNATED_INITIALIZER;
@end

@class IMGLYIconCaptionCollectionViewCell;
@class IMGLYSlider;
@class IMGLYAdjustToolControllerOptionsBuilder;

/**
  Options for configuring an \code
  AdjustToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("AdjustToolControllerOptions")
@interface IMGLYAdjustToolControllerOptions : IMGLYToolControllerOptions
/**
  This closure allows further configuration of the adjust tool buttons. The closure is called for
  each adjust tool button and has the button and its corresponding adjust tool as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable adjustToolButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, enum AdjustTool);
/**
  This closure is called every time the user selects a tool.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable adjustToolSelectedClosure)(enum AdjustTool);
/**
  This closure can be used to configure the slider that is visible when selecting an adjust tool.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(IMGLYSlider * _Nonnull);
/**
  This closure can be used to configure the view that contains the slider and that is visible when selecting
  an adjust tool.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/**
  This closure will be called whenever the value of the slider changes. The \code
  Slider
  \endcode and the active \code
  AdjustTool
  \endcode
  will be passed as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable sliderChangedValueClosure)(IMGLYSlider * _Nonnull, enum AdjustTool);
/**
  Returns a newly allocated instance of \code
  AdjustToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of \code
  AdjustToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of \code
  AdjustToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  AdjustToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of \code
  AdjustToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYAdjustToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  ToolControllerOptionsBuilder
  \endcode for \code
  ToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("ToolControllerOptionsBuilder")
@interface IMGLYToolControllerOptionsBuilder : NSObject
/**
  The background color of the accessory view. Unless this is set the configuration’s global background color,
  will be used.
*/
@property (nonatomic, strong) UIColor * _Nullable accessoryViewBackgroundColor;
/**
  A configuration closure to configure the toolbars title view.
*/
@property (nonatomic, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/**
  The tools background color. If this property is \code
  nil
  \endcode, the \code
  backgroundColor
  \endcode property of the
  \code
  Configuration
  \endcode will be used instead.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  This closure will be called when a tool has been entered.
*/
@property (nonatomic, copy) void (^ _Nullable didEnterToolClosure)(void);
/**
  The closure will be called when a tool is about to be left.
*/
@property (nonatomic, copy) void (^ _Nullable willLeaveToolClosure)(void);
/**
  A configuration closure to configure the apply button displayed at the bottom right.
  Defaults to a checkmark icon.
*/
@property (nonatomic, copy) void (^ _Nullable applyButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  A configuration closure to configure the discard button displayed at the bottom left.
  Defaults to a cross icon.
*/
@property (nonatomic, copy) void (^ _Nullable discardButtonConfigurationClosure)(IMGLYButton * _Nonnull);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  The default \code
  AdjustToolControllerOptionsBuilder
  \endcode for \code
  AdjustToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("AdjustToolControllerOptionsBuilder")
@interface IMGLYAdjustToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  This closure allows further configuration of the adjust tool buttons. The closure is called for
  each adjust tool button and has the button and its corresponding adjust tool as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable adjustToolButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, enum AdjustTool);
/**
  This closure is called every time the user selects a tool.
*/
@property (nonatomic, copy) void (^ _Nullable adjustToolSelectedClosure)(enum AdjustTool);
/**
  This closure can be used to configure the slider that is visible when selecting an adjust tool.
*/
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(IMGLYSlider * _Nonnull);
/**
  This closure can be used to configure the view that contains the slider and that is visible when selecting
  an adjust tool.
*/
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/**
  This closure will be called whenever the value of the slider changes. The \code
  Slider
  \endcode and the active \code
  AdjustTool
  \endcode
  will be passed as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(IMGLYSlider * _Nonnull, enum AdjustTool);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

@interface IMGLYAdjustToolControllerOptionsBuilder (SWIFT_EXTENSION(imglyKit))
/**
  An array of \code
  AdjustTool
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedAdjustTools
  \endcode with the corresponding \code
  AdjustTool
  \endcode values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedAdjustToolsAsNSNumbers;
@end

@protocol IMGLYAlphaPickerViewDelegate;

/**
  The \code
  AlphaPickerView
  \endcode class is a view that can be used to pick an alpha value.
  It displays a gradient from zero alpha to full alpha. The color of the gradient can be
  set via \code
  color
  \endcode or \code
  hue
  \endcode properties. The background is painted with a checkerboard pattern,
  that is provided by an image called ‘checkerboard’.
*/
SWIFT_CLASS_NAMED("AlphaPickerView")
@interface IMGLYAlphaPickerView : UIView
/**
  The receiver’s delegate.
  seealso:
  \code
  AlphaPickerViewDelegate
  \endcode.
*/
@property (nonatomic, weak) id <IMGLYAlphaPickerViewDelegate> _Nullable delegate;
/**
  The currently choosen alpha value of the picker.
*/
@property (nonatomic) CGFloat alphaValue;
/**
  The currently choosen color value of the color gradient.
*/
@property (nonatomic, strong) UIColor * _Nonnull color;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)drawRect:(CGRect)rect;
/**
  :nodoc:
*/
- (void)layoutSubviews;
@end


/**
  The \code
  AlphaPickerViewDelegate
  \endcode protocol defines methods that allow you to respond to the events of
  an instance of \code
  AlphaPickerView
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("AlphaPickerViewDelegate")
@protocol IMGLYAlphaPickerViewDelegate
/**
  Called when the alpha value was picked in the alpha picker view.
  \param alphaPickerView The alpha picker view that this event originated from.

  \param alpha The alpha value that was picked.

*/
- (void)alphaPicker:(IMGLYAlphaPickerView * _Nonnull)alphaPickerView didPickAlpha:(CGFloat)alpha;
@end


/**
  Consumers of analytics screen views and events must implement this protocol. You can then forward
  all screen views and events to an analytics service of your choice. To receive events you must
  register your \code
  AnalyticsClient
  \endcode instance with \code
  Analytics.addAnalyticsClient(_:)
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("AnalyticsClient")
@protocol IMGLYAnalyticsClient
/**
  This method is called when an analytics screen view occurs.
  \param screenView The name of the screen view.

*/
- (void)logScreenView:(IMGLYAnalyticsScreenViewName _Nonnull)screenView;
/**
  This method is called when an analytics event occurs.
  \param event The name of the event.

  \param attributes The attributes associated with the event, if any.

*/
- (void)logEvent:(IMGLYAnalyticsEventName _Nonnull)event attributes:(NSDictionary<IMGLYAnalyticsEventAttributeName, id> * _Nullable)attributes;
@end


/**
  A concrete implementation of \code
  AnalyticsClient
  \endcode that dispatches events to all registered
  clients on a background queue.
*/
SWIFT_CLASS_NAMED("Analytics")
@interface IMGLYAnalytics : NSObject <IMGLYAnalyticsClient>
/**
  Events are only dispatched if \code
  isEnabled
  \endcode is set to \code
  true
  \endcode. Defaults to \code
  false
  \endcode.
*/
@property (nonatomic) BOOL isEnabled;
/**
  Register an instance which implements the \code
  AnalyticsClient
  \endcode protocol to receiving events.
  \param client The client that should receive events.

*/
- (void)addAnalyticsClient:(id <IMGLYAnalyticsClient> _Nonnull)client;
/**
  Unregister an instance which implements the \code
  AnalyticsClient
  \endcode protocol from receiving events.
  \param client The client that should stop receiving events.

*/
- (void)removeAnalyticsClient:(id <IMGLYAnalyticsClient> _Nonnull)client;
/**
  :nodoc:
*/
- (void)logScreenView:(IMGLYAnalyticsScreenViewName _Nonnull)screenView;
/**
  :nodoc:
*/
- (void)logEvent:(IMGLYAnalyticsEventName _Nonnull)event attributes:(NSDictionary<IMGLYAnalyticsEventAttributeName, id> * _Nullable)attributes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CAAnimation;

/**
  \code
  AnimationDelegate
  \endcode can be used as the delegate of a \code
  CAAnimation
  \endcode to easily specify a completion block.
*/
SWIFT_CLASS_NAMED("AnimationDelegate")
@interface IMGLYAnimationDelegate : NSObject <CAAnimationDelegate>
/**
  The block that should be executed after a \code
  CAAnimation
  \endcode finishes.
*/
@property (nonatomic, readonly, copy) void (^ _Nonnull block)(BOOL);
/**
  :nodoc:
*/
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  Represents the type of blend that should be used for several operations such as backdrop.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, IMGLYBlendMode, "BlendMode") {
/**
  Standard alpha blending should be used.
*/
  IMGLYBlendModeNormal = 0,
/**
  Overlay blending should be used.
*/
  IMGLYBlendModeOverlay = 1,
/**
  Soft-light blending should be used.
*/
  IMGLYBlendModeSoftLight = 2,
/**
  Hard-light blending should be used.
*/
  IMGLYBlendModeHardLight = 3,
/**
  Multiply blending should be used.
*/
  IMGLYBlendModeMultiply = 4,
/**
  Darken blending should be used.
*/
  IMGLYBlendModeDarken = 5,
/**
  Color-burn blending should be used.
*/
  IMGLYBlendModeColorBurn = 6,
/**
  Screen blending should be used.
*/
  IMGLYBlendModeScreen = 7,
/**
  Lighten blending should be used.
*/
  IMGLYBlendModeLighten = 8,
};



/**
  This class represents a gradient control view. It is used within the focus tool to visualize
  the chosen focus parameters.
*/
SWIFT_CLASS_NAMED("FocusGradientView")
@interface IMGLYFocusGradientView : UIControl
/**
  The center point between both control points.
*/
@property (nonatomic, readonly) CGPoint centerPoint;
/**
  The absolute fade width value. This value is between 0 and 100.
*/
@property (nonatomic) CGFloat fadeWidth;
/**
  The normalized fade width.
*/
@property (nonatomic, readonly) CGFloat normalizedFadeWidth;
/**
  The color of the gradient view.
*/
@property (nonatomic, strong) UIColor * _Nonnull color;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)layoutSubviews;
/**
  :nodoc:
*/
- (void)accessibilityIncrement;
/**
  :nodoc:
*/
- (void)accessibilityDecrement;
@end


/**
  This class represents a rectangle gradient control view. It is used within the focus tool to visualize
  the chosen focus parameters.
*/
SWIFT_CLASS_NAMED("BoxGradientView")
@interface IMGLYBoxGradientView : IMGLYFocusGradientView
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)drawRect:(CGRect)rect;
/**
  :nodoc:
*/
- (void)layoutSubviews;
@end

@class UIImage;
@class IMGLYBoxedPhotoEditModel;

/**
  A \code
  BoxedMenuItem
  \endcode wraps a \code
  MenuItem
  \endcode so that it can be used from Objective-C. Please see the
  documentation of \code
  MenuItem
  \endcode for more details.
*/
SWIFT_CLASS_NAMED("BoxedMenuItem")
@interface IMGLYBoxedMenuItem : NSObject
/**
  Creates a boxed menu item for a tool.
  \param title The title of the tool.

  \param icon The icon of the tool.

  \param tool The tool to present when this menu item is selected.

*/
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title icon:(UIImage * _Nonnull)icon tool:(IMGLYPhotoEditToolController * _Nonnull)tool OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a boxed menu item for an action.
  \param title The title of the action.

  \param icon The icon of the action.

  \param action The action to execute when this menu item is selected.

*/
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title icon:(UIImage * _Nonnull)icon action:(IMGLYBoxedPhotoEditModel * _Nonnull (^ _Nonnull)(IMGLYBoxedPhotoEditModel * _Nonnull))action OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a boxed separator menu item.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  The title of the boxed menu item, if any.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/**
  The icon of the boxed menu item, if any.
*/
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/**
  The tool of the boxed menu item, if any.
*/
@property (nonatomic, readonly, strong) IMGLYPhotoEditToolController * _Nullable tool;
/**
  The action of the boxed menu item, if any.
*/
@property (nonatomic, readonly, copy) IMGLYBoxedPhotoEditModel * _Nonnull (^ _Nullable action)(IMGLYBoxedPhotoEditModel * _Nonnull);
/**
  Creates a boxed version of the default menu items.
  \param configuration The configuration instance to use to configure the default menu items.


  returns:
  A boxed version of the default menu items.
*/
+ (NSArray<IMGLYBoxedMenuItem *> * _Nonnull)boxedDefaultItemsWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration;
@end

enum IMGLYOrientation : NSInteger;
enum IMGLYFocusType : NSInteger;
@class CIImage;

/**
  A \code
  BoxedPhotoEditModel
  \endcode holds information about any modification that should be applied to an image.
  The actual \code
  PhotoEditModel
  \endcode is a struct and not exposable to Objective-C. This class boxes the actual
  \code
  PhotoEditModel
  \endcode for Objective-C compatibility.
*/
SWIFT_CLASS_NAMED("BoxedPhotoEditModel")
@interface IMGLYBoxedPhotoEditModel : NSObject
/**
  Creates a default boxed photo edit model.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  The orientation of the image.
*/
@property (nonatomic) enum IMGLYOrientation appliedOrientation;
/**
  Enable auto enhancement.
*/
@property (nonatomic) BOOL isAutoEnhancementEnabled;
/**
  The brightness of the image.
*/
@property (nonatomic) float brightness;
/**
  The contrast of the image.
*/
@property (nonatomic) float contrast;
/**
  The shadow amount of the image.
*/
@property (nonatomic) float shadows;
/**
  The highlights amount of the image.
*/
@property (nonatomic) float highlights;
/**
  The exposure amount of the image.
*/
@property (nonatomic) float exposure;
/**
  The clarity amount of the image.
*/
@property (nonatomic) float clarity;
/**
  The identifier of the effect filter to apply to the image.
*/
@property (nonatomic, copy) NSString * _Nonnull effectFilterIdentifier;
/**
  The intensity of the effect filter.
*/
@property (nonatomic) float effectFilterIntensity;
/**
  The first normalized control point of the focus. This control point should use the coordinate
  system of Core Image, which means that (0, 0) is at the top left.
*/
@property (nonatomic) CGPoint focusNormalizedControlPoint1;
/**
  The second normalized control point of the focus. This control point should use the coordinate
  system of Core Image, which means that (0, 0) is at the top left.
*/
@property (nonatomic) CGPoint focusNormalizedControlPoint2;
/**
  The blur radius to use for focus. Default is 25.
*/
@property (nonatomic) float focusBlurRadius;
/**
  The normalized fade width to use for focus. Default is 0.1.
*/
@property (nonatomic) float focusNormalizedFadeWidth;
/**
  The \code
  IMGLYFocusType
  \endcode to apply to the image.
*/
@property (nonatomic) enum IMGLYFocusType focusType;
/**
  This property is \code
  true
  \endcode if the image has neither been cropped nor rotated.
*/
@property (nonatomic, readonly) BOOL isGeometryIdentity;
/**
  The normalized crop rect of the image.
*/
@property (nonatomic) CGRect normalizedCropRect;
/**
  An image that should be placed on top of the input image after all other effects have been applied.
*/
@property (nonatomic, strong) CIImage * _Nullable overlayImage;
/**
  The saturation of the image.
*/
@property (nonatomic) float saturation;
/**
  The straighten angle of the image.
*/
@property (nonatomic) float straightenAngle;
/**
  The amount by which the image should be inset (this is used when a frame is applied to make
  the image fit inside the frame). The inset is specified as a value relative to the smaller
  side of the image.
*/
@property (nonatomic) UIEdgeInsets imageInsets;
/**
  An image that should be placed between the input image and the \code
  overlayImage
  \endcode.
*/
@property (nonatomic, strong) CIImage * _Nullable backdropImage;
/**
  The blend mode that is use to apply the backdrop image.
*/
@property (nonatomic) enum IMGLYBlendMode backdropBlendMode;
/**
  A value between 0 and 1, that determins the intensity that is used to render the backdrop.
*/
@property (nonatomic) float backdropIntensity;
/**
  The identity orientation of a photo edit model.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum IMGLYOrientation identityOrientation;)
+ (enum IMGLYOrientation)identityOrientation;
/**
  The identity cropping area of a photo edit model.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGRect identityNormalizedCropRect;)
+ (CGRect)identityNormalizedCropRect;
@end


/**
  A \code
  Brush
  \endcode holds all information needed to render a stroke.
*/
SWIFT_CLASS_NAMED("Brush")
@interface IMGLYBrush : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class IMGLYStampGenerator;

/**
  The \code
  GeneratorDelegate
  \endcode protocol defines methods that allow you to respond to changes that are made to a generator.
*/
SWIFT_PROTOCOL_NAMED("GeneratorDelegate")
@protocol IMGLYGeneratorDelegate
/**
  Called when a generator changes any property.
  \param generator The generator that was changed.

*/
- (void)generatorDidChange:(IMGLYStampGenerator * _Nonnull)generator;
@end


@interface IMGLYBrush (SWIFT_EXTENSION(imglyKit)) <IMGLYGeneratorDelegate>
/**
  :nodoc:
*/
- (void)generatorDidChange:(IMGLYStampGenerator * _Nonnull)generator;
@end


/**
  A \code
  ColorToolController
  \endcode is reponsible for displaying the UI to adjust the color of an element
  that has been added to an image.
*/
SWIFT_CLASS_NAMED("ColorToolController")
@interface IMGLYColorToolController : IMGLYStackLayoutToolController
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
@property (nonatomic, readonly) BOOL wantsScrollingInDefaultPreviewViewEnabled;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A \code
  BrushColorToolController
  \endcode is reponsible for displaying the UI to adjust the color of the brush
  that will be drawn on the image.
*/
SWIFT_CLASS_NAMED("BrushColorToolController")
@interface IMGLYBrushColorToolController : IMGLYColorToolController
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYBrushColorToolController (SWIFT_EXTENSION(imglyKit))
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class IMGLYColorPickerView;

@interface IMGLYBrushColorToolController (SWIFT_EXTENSION(imglyKit))
/**
  :nodoc:
*/
- (void)colorPicker:(IMGLYColorPickerView * _Nonnull)colorPickerView didPickColor:(UIColor * _Nonnull)color;
@end


@interface IMGLYBrushColorToolController (SWIFT_EXTENSION(imglyKit))
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class IMGLYColorCollectionViewCell;
@class IMGLYBrushColorToolControllerOptionsBuilder;

/**
  Options for configuring a \code
  BrushColorToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("BrushColorToolControllerOptions")
@interface IMGLYBrushColorToolControllerOptions : IMGLYToolControllerOptions
/**
  A list of colors that is available in the brush color dialog. This property is optional.
*/
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nullable availableFontColors;
/**
  A list of color-names that is available in the brush color dialog. This property is optional.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable availableFontColorNames;
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding color and color name as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable brushColorActionButtonConfigurationClosure)(IMGLYColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);
/**
  This closure is called every time the user selects an action
*/
@property (nonatomic, readonly, copy) void (^ _Nullable brushColorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);
/**
  Returns a newly allocated instance of \code
  BrushColorToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of \code
  BrushColorToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of \code
  BrushColorToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  BrushColorToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of \code
  BrushColorToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYBrushColorToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  BrushColorToolControllerOptionsBuilder
  \endcode for \code
  BrushColorToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("BrushColorToolControllerOptionsBuilder")
@interface IMGLYBrushColorToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  A list of colors that is available in the brush color dialog. This property is optional.
*/
@property (nonatomic, copy) NSArray<UIColor *> * _Nullable availableFontColors;
/**
  A list of color-names that is available in the brush color dialog. This property is optional.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable availableFontColorNames;
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding color and color name as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable brushColorActionButtonConfigurationClosure)(IMGLYColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);
/**
  This closure is called every time the user selects an action
*/
@property (nonatomic, copy) void (^ _Nullable brushColorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/**
  The overlay actions that can be used in an instance of \code
  BrushToolControllerOptions
  \endcode.
  <ul>
    <li>
      Undo:             Undo the latest stroke.
    </li>
    <li>
      BringToFront:     Bring the drawing to the front.
    </li>
    <li>
      Delete:           Delete the drawing.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, BrushOverlayAction) {
/**
  Undo the latest stroke.
*/
  BrushOverlayActionUndo = 0,
/**
  Bring the drawing to the front.
*/
  BrushOverlayActionBringToFront = 1,
/**
  Delete the drawing.
*/
  BrushOverlayActionDelete = 2,
};

/**
  The tools that can be used in an instance of \code
  BrushToolController
  \endcode.
  <ul>
    <li>
      Brightness: Change the brightness of the image.
    </li>
    <li>
      Contrast:   Change the contrast of the image.
    </li>
    <li>
      Saturation: Change the saturation of the image.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, BrushTool) {
/**
  Change the color of the brush.
*/
  BrushToolColor = 0,
/**
  Change the size of the brush.
*/
  BrushToolSize = 1,
/**
  Change the hardness of the brush.
*/
  BrushToolHardness = 2,
};


/**
  A \code
  BrushToolController
  \endcode is reponsible for displaying the UI to draw a painting on top of an image.
*/
SWIFT_CLASS_NAMED("BrushToolController")
@interface IMGLYBrushToolController : IMGLYStackLayoutToolController
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewWillAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewWillDisappear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)updateViewConstraints;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYBrushToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>
/**
  :nodoc:
*/
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface IMGLYBrushToolController (SWIFT_EXTENSION(imglyKit)) <UIGestureRecognizerDelegate>
/**
  :nodoc:
*/
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch;
@end


@interface IMGLYBrushToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYBrushToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYBrushToolController (SWIFT_EXTENSION(imglyKit))
@end

@class IMGLYCanvasView;

/**
  The \code
  CanvasViewDataSource
  \endcode protocol defines methods that allow you to pass needed information to the canvas view.
*/
SWIFT_PROTOCOL_NAMED("CanvasViewDataSource")
@protocol IMGLYCanvasViewDataSource
/**
  Called to ask for the normalized crop rect that is currently applied to the image.
  \param canvasView The canvas view that is requesting this information.


  returns:
  The normalized crop rect.
*/
- (CGRect)canvasViewNormalizedCropRect:(IMGLYCanvasView * _Nonnull)canvasView;
/**
  Called to ask for the image orientation that is currently applied to the image.
  \param canvasView The canvas view that is requesting this information.


  returns:
  The applied image orienation.
*/
- (enum IMGLYOrientation)canvasViewAppliedOrientation:(IMGLYCanvasView * _Nonnull)canvasView;
/**
  Called to ask for the straighten angle that is currently applied to the image.
  \param canvasView The canvas view that is requesting this information.


  returns:
  The applied straighten angle.
*/
- (CGFloat)canvasViewStraightenAngle:(IMGLYCanvasView * _Nonnull)canvasView;
/**
  Called to ask for the image insets that are currently applied to the image.
  \param canvasView The canvas view that is requesting this information.


  returns:
  The applied image insets.
*/
- (UIEdgeInsets)canvasViewImageInsets:(IMGLYCanvasView * _Nonnull)canvasView;
/**
  Called to ask for the size of the output image.
  \param canvasView The canvas view that is requesting this information.


  returns:
  The output image size.
*/
- (CGSize)canvasViewOutputImageSize:(IMGLYCanvasView * _Nonnull)canvasView;
@end


@interface IMGLYBrushToolController (SWIFT_EXTENSION(imglyKit)) <IMGLYCanvasViewDataSource>
/**
  :nodoc:
*/
- (CGRect)canvasViewNormalizedCropRect:(IMGLYCanvasView * _Nonnull)canvasView;
/**
  :nodoc:
*/
- (enum IMGLYOrientation)canvasViewAppliedOrientation:(IMGLYCanvasView * _Nonnull)canvasView;
/**
  :nodoc:
*/
- (CGFloat)canvasViewStraightenAngle:(IMGLYCanvasView * _Nonnull)canvasView;
/**
  :nodoc:
*/
- (UIEdgeInsets)canvasViewImageInsets:(IMGLYCanvasView * _Nonnull)canvasView;
/**
  :nodoc:
*/
- (CGSize)canvasViewOutputImageSize:(IMGLYCanvasView * _Nonnull)canvasView;
@end

@class IMGLYOverlayButton;
@class IMGLYBrushToolControllerOptionsBuilder;

/**
  Options for configuring an \code
  BrushToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("BrushToolControllerOptions")
@interface IMGLYBrushToolControllerOptions : IMGLYToolControllerOptions
/**
  This closure allows further configuration of the brush tool buttons. The closure is called for
  each brush tool button and has the button and its corresponding brush tool as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable brushToolButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum BrushTool);
/**
  This closure is called every time the user selects a tool.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable brushToolSelectedClosure)(enum BrushTool);
/**
  This closure can be used to configure the slider that is visible when selecting a brush tool.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(IMGLYSlider * _Nonnull);
/**
  This closure can be used to configure the view that contains the slider and that is visible when selecting
  a brush tool.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/**
  This closure will be called whenever the value of the slider changes. The \code
  Slider
  \endcode and the active \code
  BrushTool
  \endcode
  will be passed as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable sliderChangedValueClosure)(IMGLYSlider * _Nonnull, enum BrushTool);
/**
  This closure allows further configuration of the overlay buttons. The closure is called for
  each button and has the button and its corresponding enum value as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(IMGLYOverlayButton * _Nonnull, enum BrushOverlayAction);
/**
  This closure is called when the user selects an action.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable brushActionSelectedClosure)(enum BrushOverlayAction);
/**
  The minimum size that a brush can have in pixels.
*/
@property (nonatomic, readonly) CGFloat minimumBrushSize;
/**
  The maximum size that a brush can have in pixels.
*/
@property (nonatomic, readonly) CGFloat maximumBrushSize;
/**
  The default size that a brush has in pixels
*/
@property (nonatomic, readonly) CGFloat defaultBrushSize;
/**
  The minimum hardness factor a brush can have.
*/
@property (nonatomic, readonly) CGFloat minimumBrushHardness;
/**
  The maximum hardness factor a brush can have.
*/
@property (nonatomic, readonly) CGFloat maximumBrushHardness;
/**
  The default hardness factor a brush has.
*/
@property (nonatomic, readonly) CGFloat defaultBrushHardness;
/**
  The default color a brush has.
*/
@property (nonatomic, readonly, strong) UIColor * _Nonnull defaultBrushColor;
/**
  \code
  false
  \endcode if the opacity of the brush should vary by the size of the brush, \code
  true
  \endcode otherwise.
  Default is \code
  false
  \endcode.
*/
@property (nonatomic, readonly) BOOL usesUniformHardness;
/**
  Returns a newly allocated instance of \code
  BrushToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of \code
  BrushToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of \code
  BrushToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  BrushToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of \code
  BrushToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYBrushToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  BrushToolControllerOptionsBuilder
  \endcode for \code
  BrushToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("BrushToolControllerOptionsBuilder")
@interface IMGLYBrushToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  This closure allows further configuration of the brush tool buttons. The closure is called for
  each brush tool button and has the button and its corresponding brush tool as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable brushToolButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum BrushTool);
/**
  This closure is called every time the user selects a tool.
*/
@property (nonatomic, copy) void (^ _Nullable brushToolSelectedClosure)(enum BrushTool);
/**
  This closure can be used to configure the slider that is visible when selecting a brush tool.
*/
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(IMGLYSlider * _Nonnull);
/**
  This closure can be used to configure the view that contains the slider and that is visible when selecting
  a brush tool.
*/
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/**
  This closure will be called whenever the value of the slider changes. The \code
  Slider
  \endcode and the active \code
  BrushTool
  \endcode
  will be passed as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(IMGLYSlider * _Nonnull, enum BrushTool);
/**
  This closure allows further configuration of the overlay buttons. The closure is called for
  each button and has the button and its corresponding enum value as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(IMGLYOverlayButton * _Nonnull, enum BrushOverlayAction);
/**
  This closure is called when the user selects an action.
*/
@property (nonatomic, copy) void (^ _Nullable brushActionSelectedClosure)(enum BrushOverlayAction);
/**
  The minimum size that a brush can have in pixels.
*/
@property (nonatomic) CGFloat minimumBrushSize;
/**
  The maximum size that a brush can have in pixels.
*/
@property (nonatomic) CGFloat maximumBrushSize;
/**
  The default size that a brush has in pixels
*/
@property (nonatomic) CGFloat defaultBrushSize;
/**
  The minimum hardness factor a brush can have.
*/
@property (nonatomic) CGFloat minimumBrushHardness;
/**
  The maximum hardness factor a brush can have.
*/
@property (nonatomic) CGFloat maximumBrushHardness;
/**
  The default hardness factor a brush has.
*/
@property (nonatomic) CGFloat defaultBrushHardness;
/**
  The default color a brush has.
*/
@property (nonatomic, strong) UIColor * _Nonnull defaultBrushColor;
/**
  \code
  false
  \endcode if the hardness of the brush should vary by the size of the brush, \code
  true
  \endcode otherwise.
  Default is \code
  false
  \endcode.
*/
@property (nonatomic) BOOL usesUniformHardness;
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYBrushToolControllerOptionsBuilder (SWIFT_EXTENSION(imglyKit))
/**
  An array of \code
  BrushTool
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedBrushTools
  \endcode with the corresponding \code
  BrushTool
  \endcode values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedBrushToolsAsNSNumbers;
/**
  An array of \code
  BrushOverlayAction
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedBrushOverlayActions
  \endcode with the corresponding \code
  BrushOverlayAction
  \endcode values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedBrushOverlayActionsAsNSNumbers;
@end


@interface NSBundle (SWIFT_EXTENSION(imglyKit))
/**
  The bundle that contains all assets of the PhotoEditor SDK.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull imglyKitBundle;)
+ (NSBundle * _Nonnull)imglyKitBundle;
@end

@class UIEvent;

/**
  A \code
  Button
  \endcode is a subclass of \code
  UIButton
  \endcode, which supports running a closure for a given control event
  and has the ability to specify a touch area inset.
*/
SWIFT_CLASS_NAMED("Button")
@interface IMGLYButton : UIButton
/**
  Associates a closure with the control.
  \param actionClosure The closure to associate with the control.

  \param controlEvents The control-specific events for which the closure is called.

*/
- (void)setActionClosure:(void (^ _Nullable)(id _Nonnull))actionClosure for:(UIControlEvents)controlEvents;
/**
  Associates a closure with the control for the \code
  .touchUpInside
  \endcode control event.
*/
@property (nonatomic, copy) void (^ _Nullable actionClosure)(id _Nonnull);
/**
  The insets to add to the touch target.
*/
@property (nonatomic) UIEdgeInsets touchAreaInsets;
/**
  :nodoc:
*/
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class GLKView;
enum RecordingMode : NSInteger;
@class NSError;
@class AVAssetWriter;
@class IMGLYPhotoEffect;

/**
  The \code
  CameraController
  \endcode class provides functions for serveral camera related tasks,
  including setup, flash control, and such.
*/
SWIFT_CLASS_NAMED("CameraController")
@interface IMGLYCameraController : NSObject
/**
  An instance of a \code
  GLKView
  \endcode that is used to present the preview.
*/
@property (nonatomic, readonly, strong) GLKView * _Nonnull videoPreviewView;
/**
  The currently active recording mode (i.e. \code
  .Photo
  \endcode or \code
  .Video
  \endcode). Setting this property before
  calling \code
  setupWithInitialRecordingMode(:)
  \endcode is ignored. The setter asynchronously updates the
  session, so the getter might not immediately represent the new value. You can observe changes
  to the value of this property using key-value observing.
*/
@property (nonatomic) enum RecordingMode recordingMode;
/**
  Called when the \code
  running
  \endcode state of the camera changes.
*/
@property (nonatomic, copy) void (^ _Nullable runningStateChangedHandler)(BOOL);
/**
  Called when the camera position changes.
*/
@property (nonatomic, copy) void (^ _Nullable cameraPositionChangedHandler)(AVCaptureDevicePosition, AVCaptureDevicePosition);
/**
  Called when the list of available camera positions was changed.
*/
@property (nonatomic, copy) void (^ _Nullable availableCameraPositionsChangedHandler)(void);
/**
  Called when any aspect of the flash changes.
  \code
  hasFlash
  \endcode is \code
  true
  \endcode if the current camera has a flash. \code
  flashMode
  \endcode represents the currently
  active flash mode. \code
  flashAvailable
  \endcode is \code
  true
  \endcode if the flash is available for use.
*/
@property (nonatomic, copy) void (^ _Nullable flashChangedHandler)(BOOL, AVCaptureFlashMode, BOOL);
/**
  Called when any aspect of the torch changes.
  \code
  hasTorch
  \endcode is \code
  true
  \endcode if the current camera has a torch. \code
  torchMMode
  \endcode represents the currently
  active torch mode. \code
  torchAvailable
  \endcode is \code
  true
  \endcode if the torch is available for use.
*/
@property (nonatomic, copy) void (^ _Nullable torchChangedHandler)(BOOL, AVCaptureTorchMode, BOOL);
/**
  Called when a photo is currently being captured or done being captured.
*/
@property (nonatomic, copy) void (^ _Nullable capturingStillImageHandler)(BOOL);
/**
  Called when the session is interrupted or the interruption ended. This can happen when
  switching to a multi-app layout, introduced in iOS 9 for example.
*/
@property (nonatomic, copy) void (^ _Nullable sessionInterruptionHandler)(BOOL);
/**
  Called when a runtime error occurs.
*/
@property (nonatomic, copy) void (^ _Nullable sessionRuntimeErrorHandler)(NSError * _Nonnull);
/**
  Called when the user did not grant authorization for the camera.
*/
@property (nonatomic, copy) void (^ _Nullable authorizationFailedHandler)(void);
/**
  Called when video recording starts.
*/
@property (nonatomic, copy) void (^ _Nullable videoRecordingStartedHandler)(void);
/**
  Called when video recording finishes.
*/
@property (nonatomic, copy) void (^ _Nullable videoRecordingFinishedHandler)(NSURL * _Nonnull);
/**
  Called when video recording fails.
*/
@property (nonatomic, copy) void (^ _Nullable videoRecordingFailedHandler)(void);
/**
  Called each second while a video recording is in progress.
*/
@property (nonatomic, copy) void (^ _Nullable videoRecordingProgressHandler)(NSInteger);
/**
  Called when the size of the preview image within the \code
  videoPreviewView
  \endcode changes
*/
@property (nonatomic, copy) void (^ _Nullable previewFrameChangedHandler)(CGRect);
/**
  Called when the focus point changes.
*/
@property (nonatomic, copy) void (^ _Nullable focusPointChangedHandler)(CGPoint);
/**
  Called when the focus mode changes.
*/
@property (nonatomic, copy) void (^ _Nullable focusModeChangedHandler)(AVCaptureFocusMode, AVCaptureExposureMode);
/**
  Called when the focus gets disabled.
*/
@property (nonatomic, copy) void (^ _Nullable focusDisabledHandler)(void);
/**
  The video output settings to use for video recording. If \code
  nil
  \endcode, the recommended video
  settings for file type \code
  AVFileTypeQuickTimeMovie
  \endcode will be used.
*/
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable videoOutputSettings;
/**
  The video output settings to use for video recording. If \code
  nil
  \endcode, the recommended audio
  settings for file type \code
  AVFileTypeQuickTimeMovie
  \endcode will be used.
*/
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable audioOutputSettings;
/**
  The file type to use for video recording. Default is \code
  AVFileTypeQuickTimeMovie
  \endcode.
  note:
  If you change this, you will most likely also want to change \code
  videoOutputSettings
  \endcode
  and \code
  audioOutputSettings
  \endcode.
*/
@property (nonatomic, copy) NSString * _Nonnull videoRecordingFileType;
/**
  The extension to use for video files. Default is “mov”.
*/
@property (nonatomic, copy) NSString * _Nonnull videoRecordingFileExtension;
/**
  Use this closure to further configure the asset writer that is created for video recording.
*/
@property (nonatomic, copy) void (^ _Nullable assetWriterConfigurationClosure)(AVAssetWriter * _Nonnull);
/**
  Set to \code
  false
  \endcode to disable locking focus when a user taps on the live preview. Default is \code
  true
  \endcode.
*/
@property (nonatomic) BOOL tapToFocusEnabled;
/**
  The effect filter that is applied to the live feed.
*/
@property (nonatomic, strong) IMGLYPhotoEffect * _Nullable photoEffect;
/**
  The intensity of the filter that is applied to the live feed.
*/
@property (nonatomic) CGFloat photoEffectIntensity;
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes the camera. This method <em>must</em> be called before calling \code
  startCamera()
  \endcode.
  Any handlers that will be used should be set before calling this method, so that they are called
  with their initial values.
  \param recordingMode The initial recording mode (e.g. \code
  .Photo
  \endcode or \code
  .Video
  \endcode) to use when
  initializing the camera.


  throws:
  A \code
  CameraControllerError
  \endcode or an \code
  NSError
  \endcode if setup fails.
*/
- (BOOL)setupWithInitialRecordingMode:(enum RecordingMode)recordingMode error:(NSError * _Nullable * _Nullable)error;
/**
  Same as \code
  setupWithInitialRecordingMode(:)
  \endcode but with an optional completion handler. The completion handler is always invoked
  on the main thread.
  \param recordingMode The initial recording mode (e.g. \code
  .Photo
  \endcode or \code
  .Video
  \endcode) to use when
  initializing the camera.

  \param completion A block to be executed when the camera has finished initialization.


  throws:
  A \code
  CameraControllerError
  \endcode or an \code
  NSError
  \endcode if setup fails.
*/
- (BOOL)setupWithInitialRecordingMode:(enum RecordingMode)recordingMode completion:(void (^ _Nullable)(void))completion error:(NSError * _Nullable * _Nullable)error;
/**
  Starts the camera. \code
  setupWithInitialRecordingMode(:)
  \endcode <em>must</em> be called before calling this method, otherwise this method does
  nothing. You should also add the \code
  videoPreviewView
  \endcode to your view hierachy to see the camera output.
*/
- (void)startCamera;
/**
  Stops the camera.
*/
- (void)stopCamera;
/**
  Switches the camera to the other position (e.g. \code
  .Back
  \endcode -> \code
  .Front
  \endcode and \code
  .Front
  \endcode -> \code
  .Back
  \endcode)
*/
- (void)toggleCameraPosition;
/**
  Switches the camera to the desired position (if available).
  \param position The position to switch to.

*/
- (void)switchToCameraAtPosition:(AVCaptureDevicePosition)position;
/**
  Takes a photo and hands it over to the completion block. The completion block always runs on the main
  thread.
  \param completion A completion block that has an image and an error as parameters.
  If the image was taken sucessfully the error is nil.

*/
- (void)takePhoto:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
/**
  Starts the video recording. This only works if \code
  recordingMode
  \endcode is set to .Video. You should
  set appropriate blocks for \code
  videoRecordingStartedHandler
  \endcode, \code
  videoRecordingFailedHandler
  \endcode,
  \code
  videoRecordingFinishedHandler
  \endcode and \code
  videoRecordingProgressHandler
  \endcode. The finished handler gets
  passed a \code
  NSURL
  \endcode to the path of the recorded video file. Please note that you are responsible
  for deleting that file when you no longer need it.
*/
- (void)startVideoRecording;
/**
  Stops video recording. This only works if you previously started video recording.
*/
- (void)stopVideoRecording;
/**
  Selects the next light mode. The order is taken from \code
  flashModes
  \endcode or \code
  torchModes
  \endcode depending on which is active.
  If the current device does not support a light mode, the next light mode that is supported is used or \code
  .Off
  \endcode.
*/
- (void)selectNextLightMode;
/**
  :nodoc:
*/
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


@interface IMGLYCameraController (SWIFT_EXTENSION(imglyKit))
/**
  An array of \code
  AVCaptureDevicePosition
  \endcode raw values wrapped in \code
  NSNumber
  \endcodes.
  Setting this property overrides any previously set values in
  \code
  cameraPositions
  \endcode with the corresponding unwrapped values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cameraPositionsAsNSNumbers;
/**
  An array of \code
  AVCaptureFlashMode
  \endcode raw values wrapped in \code
  NSNumber
  \endcodes.
  Setting this property overrides any previously set values in
  \code
  flashModes
  \endcode with the corresponding unwrapped values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull flashModesAsNSNumbers;
/**
  An array of \code
  AVCaptureTorchMode
  \endcode raw values wrapped in \code
  NSNumber
  \endcodes.
  Setting this property overrides any previously set values in
  \code
  torchModes
  \endcode with the corresponding unwrapped values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull torchModesAsNSNumbers;
@end

/**
  This enum holds types of errors that occur while using the \code
  CameraController
  \endcode.
  <ul>
    <li>
      MultipleCallsToSetup:            Indicates that setup is called multiple times.
    </li>
    <li>
      UnableToInitializeCaptureDevice: Indicates that the capture device can’t be initialized.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, CameraControllerError) {
/**
  Indicates that setup is called multiple times.
*/
  CameraControllerErrorMultipleCallsToSetup = 0,
/**
  Indicates that the capture device can’t be initialized.
*/
  CameraControllerErrorUnableToInitializeCaptureDevice = 1,
};
static NSString * _Nonnull const CameraControllerErrorDomain = @"imglyKit.CameraControllerError";

@class UILabel;
@class UISwipeGestureRecognizer;
@class IMGLYFilterSelectionController;
@class VideoRecordButton;

/**
  The \code
  CameraViewController
  \endcode class provides a dialog to perform serveral tasks regarding the camera.
  These include taking photos, switching on the flash, and such.
*/
SWIFT_CLASS_NAMED("CameraViewController")
@interface IMGLYCameraViewController : UIViewController
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a camera view controller using the given parameters.
  <em>Discussion</em>
  If you use the standard \code
  init
  \endcode method or \code
  initWithCoder
  \endcode to initialize a \code
  CameraViewController
  \endcode object, a camera view controller with all supported recording modes and the default configuration is created.
  \param configuration An \code
  Configuration
  \endcode object.


  returns:
  And initialized \code
  CameraViewController
  \endcode.
*/
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  The view that contains the background views.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull backgroundContainerView;
/**
  The view that contains all view positioned at the top of the screen.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull topControlsView;
/**
  The view that serves as container for the actual preview.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull cameraPreviewContainer;
/**
  The view that contains all view positioned at the bottom of the screen.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull bottomControlsView;
/**
  The view that contains actions button that is used to initiate the photo capturing process.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull actionButtonContainer;
/**
  The label that is used to display the current recording time.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull recordingTimeLabel;
/**
  The button that is used to initiate the photo capturing process.
*/
@property (nonatomic, readonly, strong) UIControl * _Nullable actionButton;
/**
  The view that is used to select the current filter that is applied to the preview.
*/
@property (nonatomic, readonly, strong) IMGLYButton * _Nonnull filterSelectionButton;
/**
  The slider that is used to control the inensity of the previewed filter.
*/
@property (nonatomic, readonly, strong) IMGLYSlider * _Nonnull filterIntensitySlider;
/**
  The recognizer that detects a swipe gesture to the right.
*/
@property (nonatomic, readonly, strong) UISwipeGestureRecognizer * _Nonnull swipeRightGestureRecognizer;
/**
  The recognizer that detects a swipe gesture to the left.
*/
@property (nonatomic, readonly, strong) UISwipeGestureRecognizer * _Nonnull swipeLeftGestureRecognizer;
/**
  The instance of a \code
  FilterSelectionController
  \endcode that is used to select the current preview filter.
*/
@property (nonatomic, readonly, strong) IMGLYFilterSelectionController * _Nonnull filterSelectionController;
/**
  The camera controller that is used by the controller.
*/
@property (nonatomic, readonly, strong) IMGLYCameraController * _Nullable cameraController;
/**
  The block that is called once the capture process has finished.
*/
@property (nonatomic, copy) void (^ _Nullable completionBlock)(UIImage * _Nullable, NSURL * _Nullable);
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewWillDisappear:(BOOL)animated;
/**
  :nodoc:
*/
@property (nonatomic, readonly) BOOL shouldAutomaticallyForwardAppearanceMethods;
/**
  :nodoc:
*/
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/**
  :nodoc:
*/
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/**
  :nodoc:
*/
@property (nonatomic, readonly) BOOL shouldAutorotate;
/**
  :nodoc:
*/
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
/**
  This function gets the most recent image form the camera roll, and sets it as preview image for the according button.
*/
- (void)setLastImageFromRollAsPreview;
/**
  Takes a photo.
  \param sender The object that initiated the request.

*/
- (void)takePhoto:(IMGLYButton * _Nullable)sender;
/**
  Toggles video recording.
  \param sender Sender of the event.

*/
- (void)recordVideo:(VideoRecordButton * _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface IMGLYCameraViewController (SWIFT_EXTENSION(imglyKit)) <UIGestureRecognizerDelegate>
/**
  :nodoc:
*/
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch;
@end

@class UIImagePickerController;

@interface IMGLYCameraViewController (SWIFT_EXTENSION(imglyKit)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/**
  :nodoc:
*/
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *, id> * _Nonnull)info;
/**
  :nodoc:
*/
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end

@class IMGLYPhotoEditViewController;

/**
  The \code
  PhotoEditViewControllerDelegate
  \endcode protocol defines methods that allow you to respond to the events of an instance of \code
  PhotoEditViewController
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("PhotoEditViewControllerDelegate")
@protocol IMGLYPhotoEditViewControllerDelegate
/**
  Called when the output image was generated.
  \param photoEditViewController The photo edit view controller that created the output image.

  \param image The output image that was generated.

  \param data The output image that was generated, as NSData. This will contain all the exif-data of the input image.

*/
- (void)photoEditViewController:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController didSaveImage:(UIImage * _Nonnull)image imageAsData:(NSData * _Nonnull)data;
/**
  Called when the output image could not be generated.
  \param photoEditViewController The photo edit view controller that was unable to generate the output image.

*/
- (void)photoEditViewControllerDidFailToGeneratePhoto:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController;
/**
  Called when the user wants to dismiss the editor.
  \param photoEditViewController The photo edit view controller that is asking to be cancelled.

*/
- (void)photoEditViewControllerDidCancel:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController;
@end


@interface IMGLYCameraViewController (SWIFT_EXTENSION(imglyKit)) <IMGLYPhotoEditViewControllerDelegate>
/**
  :nodoc:
*/
- (void)photoEditViewControllerDidCancel:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController;
/**
  :nodoc:
*/
- (void)photoEditViewControllerDidFailToGeneratePhoto:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController;
/**
  :nodoc:
*/
- (void)photoEditViewController:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController didSaveImage:(UIImage * _Nonnull)image imageAsData:(NSData * _Nonnull)data;
@end


/**
  Options for configuring a \code
  CameraViewController
  \endcode.
*/
SWIFT_CLASS_NAMED("CameraViewControllerOptions")
@interface IMGLYCameraViewControllerOptions : NSObject
/**
  The views background color. In video mode the colors alpha value is reduced to 0.3.
  Defaults to the global background color.
*/
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/**
  Use this closure to configure the flash button.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable flashButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Use this closure to configure the switch camera button.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable switchCameraButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Use this closure to configure the camera roll button.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable cameraRollButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Use this closure to configure the action button in photo mode.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable photoActionButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Use this closure to configure the filter selector button.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable filterSelectorButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Use this closure to configure the timelabel.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable timeLabelConfigurationClosure)(UILabel * _Nonnull);
/**
  Use this closure to configure the filter intensity slider.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(IMGLYSlider * _Nonnull);
/**
  Use this closure to configure the given recording mode button. By default the buttons
  light up in yellow, when selected.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable recordingModeButtonConfigurationClosure)(IMGLYButton * _Nonnull, enum RecordingMode);
/**
  Enable/Disable permanent crop to square. Disabled by default.
*/
@property (nonatomic, readonly) BOOL cropToSquare;
/**
  The maximum length of a video. If set to 0 the length is unlimited.
*/
@property (nonatomic, readonly) NSInteger maximumVideoLength;
/**
  Enable/Disable tap to focus on the camera preview image. Enabled by default.
*/
@property (nonatomic, readonly) BOOL tapToFocusEnabled;
/**
  Show/Hide the camera roll button. Enabled by default.
*/
@property (nonatomic, readonly) BOOL showCameraRoll;
/**
  Enable/Disable filter bottom drawer. Enabled by default.
*/
@property (nonatomic, readonly) BOOL showFilters;
/**
  Enable/Disable filter intensity slider.
*/
@property (nonatomic, readonly) BOOL showFilterIntensitySlider;
/**
  The initial intensity of the filters.
*/
@property (nonatomic, readonly) CGFloat initialFilterIntensity;
- (CGFloat)initialFilterIntensity SWIFT_METHOD_FAMILY(none);
/**
  The video output settings to use for video recording. If \code
  nil
  \endcode, the recommended video
  settings for file type \code
  AVFileTypeQuickTimeMovie
  \endcode will be used.
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable videoOutputSettings;
/**
  The video output settings to use for video recording. If \code
  nil
  \endcode, the recommended audio
  settings for file type \code
  AVFileTypeQuickTimeMovie
  \endcode will be used.
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable audioOutputSettings;
/**
  The file type to use for video recording. Default is \code
  AVFileTypeQuickTimeMovie
  \endcode.
  note:
  If you change this, you will most likely also want to change \code
  videoOutputSettings
  \endcode
  and \code
  audioOutputSettings
  \endcode.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull videoRecordingFileType;
/**
  The extension to use for video files. Default is “mov”.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull videoRecordingFileExtension;
/**
  Use this closure to further configure the asset writer that is created for video recording.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable assetWriterConfigurationClosure)(AVAssetWriter * _Nonnull);
/**
  Returns a newly allocated instance of a \code
  CameraViewControllerOptions
  \endcode using the default builder.

  returns:
  An instance of a \code
  CameraViewControllerOptions
  \endcode.
*/
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  CameraViewControllerOptionsBuilder
  \endcode for \code
  CameraViewControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("CameraViewControllerOptionsBuilder")
@interface IMGLYCameraViewControllerOptionsBuilder : NSObject
/**
  The views background color. In video mode the colors alpha value is reduced to 0.3.
  Defaults to the global background color.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  Use this closure to configure the flash button. Defaults to an empty implementation.
*/
@property (nonatomic, copy) void (^ _Nullable flashButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Use this closure to configure the switch camera button. Defaults to an empty implementation.
*/
@property (nonatomic, copy) void (^ _Nullable switchCameraButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Use this closure to configure the camera roll button. Defaults to an empty implementation.
*/
@property (nonatomic, copy) void (^ _Nullable cameraRollButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Use this closure to configure the action button in photo mode. Defaults to an empty implementation.
*/
@property (nonatomic, copy) void (^ _Nullable photoActionButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Use this closure to configure the filter selector button. Defaults to an empty implementation.
*/
@property (nonatomic, copy) void (^ _Nullable filterSelectorButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Use this closure to configure the timelabel. Defaults to an empty implementation.
*/
@property (nonatomic, copy) void (^ _Nullable timeLabelConfigurationClosure)(UILabel * _Nonnull);
/**
  Use this closure to configure the filter intensity slider. Defaults to an empty implementation.
*/
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(IMGLYSlider * _Nonnull);
/**
  Use this closure to configure the given recording mode button. By default the buttons
  light up in yellow, when selected.
*/
@property (nonatomic, copy) void (^ _Nullable recordingModeButtonConfigurationClosure)(IMGLYButton * _Nonnull, enum RecordingMode);
/**
  Enable/Disable permanent crop to square. Disabled by default.
*/
@property (nonatomic) BOOL cropToSquare;
/**
  The maximum length of a video. If set to 0 the length is unlimited.
*/
@property (nonatomic) NSInteger maximumVideoLength;
/**
  Enable/Disable tap to focus on the camera preview image. Enabled by default.
*/
@property (nonatomic) BOOL tapToFocusEnabled;
/**
  Show/Hide the camera roll button. Enabled by default.
*/
@property (nonatomic) BOOL showCameraRoll;
/**
  Enable/Disable filter bottom drawer. Enabled by default.
*/
@property (nonatomic) BOOL showFilters;
/**
  Enable/Disable filter intensity slider.
*/
@property (nonatomic) BOOL showFilterIntensitySlider;
/**
  The initial intensity of the filters.
*/
@property (nonatomic) CGFloat initialFilterIntensity;
- (CGFloat)initialFilterIntensity SWIFT_METHOD_FAMILY(none);
/**
  The video output settings to use for video recording. If \code
  nil
  \endcode, the recommended video
  settings for file type \code
  AVFileTypeQuickTimeMovie
  \endcode will be used.
*/
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable videoOutputSettings;
/**
  The video output settings to use for video recording. If \code
  nil
  \endcode, the recommended audio
  settings for file type \code
  AVFileTypeQuickTimeMovie
  \endcode will be used.
*/
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable audioOutputSettings;
/**
  The file type to use for video recording. Default is \code
  AVFileTypeQuickTimeMovie
  \endcode.
  note:
  If you change this, you will most likely also want to change \code
  videoOutputSettings
  \endcode
  and \code
  audioOutputSettings
  \endcode.
*/
@property (nonatomic, copy) NSString * _Nonnull videoRecordingFileType;
/**
  The extension to use for video files. Default is “mov”.
*/
@property (nonatomic, copy) NSString * _Nonnull videoRecordingFileExtension;
/**
  Use this closure to further configure the asset writer that is created for video recording.
*/
@property (nonatomic, copy) void (^ _Nullable assetWriterConfigurationClosure)(AVAssetWriter * _Nonnull);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYCameraViewControllerOptionsBuilder (SWIFT_EXTENSION(imglyKit))
/**
  An array of \code
  AVCaptureDevicePosition
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedCameraPositions
  \endcode with the corresponding unwrapped values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedCameraPositionsAsNSNumbers;
/**
  An array of \code
  AVCaptureFlashMode
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedFlashModes
  \endcode with the corresponding unwrapped values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedFlashModesAsNSNumbers;
/**
  An array of \code
  AVCaptureTorchMode
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedFlashModes
  \endcode with the corresponding unwrapped values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTorchModesAsNSNumbers;
/**
  An array of \code
  RecordingMode
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedRecordingModes
  \endcode with the corresponding unwrapped values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedRecordingModesAsNSNumbers;
@end

@class IMGLYPainting;
@class IMGLYTool;
@class EAGLContext;

/**
  The \code
  CanvasView
  \endcode is responsible for presenting a painting and handling touch events related to paintings.
*/
SWIFT_CLASS_NAMED("CanvasView")
@interface IMGLYCanvasView : GLKView
/**
  The painting that is managed by this canvas view.
*/
@property (nonatomic, readonly, strong) IMGLYPainting * _Nonnull painting;
/**
  The tool that is currently active. Currently only an instance of \code
  FreehandTool
  \endcode is supported.
*/
@property (nonatomic, strong) IMGLYTool * _Nonnull activeTool;
/**
  The object that acts as the data source for the canvas view.
*/
@property (nonatomic, weak) id <IMGLYCanvasViewDataSource> _Nullable dataSource;
/**
  \code
  true
  \endcode if a user is currently painting, \code
  false
  \endcode otherwise.
*/
@property (nonatomic, readonly) BOOL currentlyPainting;
/**
  Returns a newly initialized canvas view for the given painting, with the given tool and the given frame.
  \param painting The painting that is managed by this canvas view.

  \param activeTool The tool that should be used for the painting. Currently only an instance of \code
  FreehandTool
  \endcode is supported.

  \param frame The frame of the view.


  returns:
  A newly initialized \code
  CanvasView
  \endcode object.
*/
- (nonnull instancetype)initWithPainting:(IMGLYPainting * _Nonnull)painting activeTool:(IMGLYTool * _Nonnull)activeTool frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)layoutSubviews;
/**
  Converts a given point from view coordinates to painting coordinates.
  \param pt The point that should be converted.


  returns:
  The converted point.
*/
- (CGPoint)convertPointToDocument:(CGPoint)pt;
/**
  :nodoc:
*/
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame context:(EAGLContext * _Nonnull)context SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



/**
  This class represents a circle gradient control view. It is used within the focus tool to visualize
  the chosen focus parameters.
*/
SWIFT_CLASS_NAMED("CircleGradientView")
@interface IMGLYCircleGradientView : IMGLYFocusGradientView
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)drawRect:(CGRect)rect;
/**
  :nodoc:
*/
- (void)layoutSubviews;
@end


/**
  Applies clarity to an instance of \code
  CIImage
  \endcode.
*/
SWIFT_CLASS_NAMED("ClarityFilter")
@interface IMGLYClarityFilter : CIFilter
/**
  The input image.
*/
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/**
  The intensity of this filter.
*/
@property (nonatomic, strong) NSNumber * _Nullable inputIntensity;
/**
  :nodoc:
*/
- (void)setDefaults;
/**
  :nodoc:
*/
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImageView;

/**
  A \code
  ColorCollectionViewCell
  \endcode is a cell that shows a solid color and an image view on top of that color when the cell
  is selected. It also has a \code
  selectionIndicator
  \endcode to show whether or not the cell is currently selected.
*/
SWIFT_CLASS_NAMED("ColorCollectionViewCell")
@interface IMGLYColorCollectionViewCell : UICollectionViewCell
/**
  A view that represents a solid color.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull colorView;
/**
  An image view that is above the solid color and only visible when the cell is selected.
*/
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)prepareForReuse;
/**
  :nodoc:
*/
@property (nonatomic, setter=setSelected:) BOOL isSelected;
/**
  :nodoc:
*/
@property (nonatomic, setter=setHighlighted:) BOOL isHighlighted;
@end

@protocol IMGLYColorPickerViewDelegate;

/**
  The \code
  ColorPickerView
  \endcode provides a way to pick colors.
  It contains three elements - a hue picker, a brightness/saturation picker and a preview of the
  picked color.
*/
SWIFT_CLASS_NAMED("ColorPickerView")
@interface IMGLYColorPickerView : UIView
/**
  The receiver’s delegate.
  seealso:
  \code
  ColorPickerViewDelegate
  \endcode.
*/
@property (nonatomic, weak) id <IMGLYColorPickerViewDelegate> _Nullable delegate;
/**
  The currently selected color.
*/
@property (nonatomic, strong) UIColor * _Nonnull color;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYColorPickerView (SWIFT_EXTENSION(imglyKit)) <IMGLYAlphaPickerViewDelegate>
/**
  :nodoc:
*/
- (void)alphaPicker:(IMGLYAlphaPickerView * _Nonnull)alphaPickerView didPickAlpha:(CGFloat)alpha;
@end

@class IMGLYSaturationBrightnessPickerView;

/**
  The \code
  SaturationBrightnessPickerViewDelegate
  \endcode protocol defines methods that allow you to respond
  to the events of an instance of \code
  SaturationBrightnessPickerView
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("SaturationBrightnessPickerViewDelegate")
@protocol IMGLYSaturationBrightnessPickerViewDelegate
/**
  Called when a saturation was picked in the saturation brightness picker view.
  \param saturationBrightnessPickerView The saturation brightness picker view that this event originated from.

  \param color The color that was picked.

*/
- (void)saturationBrightnessPicker:(IMGLYSaturationBrightnessPickerView * _Nonnull)saturationBrightnessPickerView didPickColor:(UIColor * _Nonnull)color;
@end


@interface IMGLYColorPickerView (SWIFT_EXTENSION(imglyKit)) <IMGLYSaturationBrightnessPickerViewDelegate>
/**
  :nodoc:
*/
- (void)saturationBrightnessPicker:(IMGLYSaturationBrightnessPickerView * _Nonnull)saturationBrightnessPickerView didPickColor:(UIColor * _Nonnull)color;
@end

@class IMGLYHuePickerView;

/**
  The \code
  HuePickerViewDelegate
  \endcode will be used to broadcast changes of the picked hue.
  The \code
  HuePickerViewDelegate
  \endcode protocol defines methods that allow you to respond to the events of
  an instance of \code
  HuePickerView
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("HuePickerViewDelegate")
@protocol IMGLYHuePickerViewDelegate
/**
  Called when a hue was picked.
  \param huePickerView The hue picker view that this event originated from.

  \param hue The new hue value.

*/
- (void)huePicker:(IMGLYHuePickerView * _Nonnull)huePickerView didPickHue:(CGFloat)hue;
@end


@interface IMGLYColorPickerView (SWIFT_EXTENSION(imglyKit)) <IMGLYHuePickerViewDelegate>
/**
  :nodoc:
*/
- (void)huePicker:(IMGLYHuePickerView * _Nonnull)huePickerView didPickHue:(CGFloat)hue;
@end


/**
  The \code
  ColorPickerViewDelegate protocol defines a set of methods that you can use to receive value-change message for
  \endcodeColorPickerView` objects.
*/
SWIFT_PROTOCOL_NAMED("ColorPickerViewDelegate")
@protocol IMGLYColorPickerViewDelegate
/**
  Called when a color has been picked.
  \param colorPickerView The color picker that this event originated from.

  \param color The color that was picked.

*/
- (void)colorPicker:(IMGLYColorPickerView * _Nonnull)colorPickerView didPickColor:(UIColor * _Nonnull)color;
/**
  Called when the color picker has been dismissed without selecting a color.
  \param colorPickerView The color picker that hits event originated from.

*/
- (void)colorPickerDidCancel:(IMGLYColorPickerView * _Nonnull)colorPickerView;
@end



@interface IMGLYColorToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>
/**
  :nodoc:
*/
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYColorToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYColorToolController (SWIFT_EXTENSION(imglyKit)) <IMGLYColorPickerViewDelegate>
/**
  :nodoc:
*/
- (void)colorPicker:(IMGLYColorPickerView * _Nonnull)colorPickerView didPickColor:(UIColor * _Nonnull)color;
/**
  :nodoc:
*/
- (void)colorPickerDidCancel:(IMGLYColorPickerView * _Nonnull)colorPickerView;
@end


@interface IMGLYColorToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYColorToolController (SWIFT_EXTENSION(imglyKit))
@end

@protocol IMGLYProgressView;
@class IMGLYPhotoEditViewControllerOptions;
@class IMGLYFilterToolControllerOptions;
@class IMGLYStickerToolControllerOptions;
@class IMGLYStickerOptionsToolControllerOptions;
@class IMGLYStickerColorToolControllerOptions;
@class IMGLYTransformToolControllerOptions;
@class IMGLYFocusToolControllerOptions;
@class IMGLYTextToolControllerOptions;
@class IMGLTextOptionsToolControllerOptions;
@class IMGLYTextFontToolControllerOptions;
@class IMGLYTextColorToolControllerOptions;
@class IMGLYFrameToolControllerOptions;
@class IMGLYConfigurationBuilder;

/**
  An Configuration defines behaviour and look of all view controllers
  provided by the imglyKit. It uses the builder pattern to create an
  immutable object via a closure. To configure the different editors and
  viewControllers contained in the SDK, edit their options in the corresponding
  \code
  configure*ViewController
  \endcode method of the \code
  ConfigurationBuilder
  \endcode.
*/
SWIFT_CLASS_NAMED("Configuration")
@interface IMGLYConfiguration : NSObject
/**
  The background color. Defaults to black.
*/
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundColor;
/**
  The background color of the accessory view. Defaults to gray.
*/
@property (nonatomic, readonly, strong) UIColor * _Nonnull accessoryViewBackgroundColor;
/**
  The color of the separator that is drawn to separate different menu items.
*/
@property (nonatomic, readonly, strong) UIColor * _Nonnull separatorColor;
/**
  The progress view HUD to use to display loading messages.
*/
@property (nonatomic, readonly, strong) id <IMGLYProgressView> _Nonnull progressView;
/**
  Options for the \code
  CameraViewController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYCameraViewControllerOptions * _Nonnull cameraViewControllerOptions;
/**
  Options for the \code
  PhotoEditViewController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYPhotoEditViewControllerOptions * _Nonnull photoEditViewControllerOptions;
/**
  Options for the \code
  FilterToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYFilterToolControllerOptions * _Nonnull filterToolControllerOptions;
/**
  Options for the \code
  StickerToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYStickerToolControllerOptions * _Nonnull stickerToolControllerOptions;
/**
  Options for the \code
  StickerOptionsToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYStickerOptionsToolControllerOptions * _Nonnull stickerOptionsToolControllerOptions;
/**
  Options for the \code
  StickerColorToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYStickerColorToolControllerOptions * _Nonnull stickerColorToolControllerOptions;
/**
  Options for the \code
  TransformToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYTransformToolControllerOptions * _Nonnull transformToolControllerOptions;
/**
  Options for the \code
  FocusToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYFocusToolControllerOptions * _Nonnull focusToolControllerOptions;
/**
  Options for the \code
  TextToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYTextToolControllerOptions * _Nonnull textToolControllerOptions;
/**
  Options for the \code
  TextOptionsToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLTextOptionsToolControllerOptions * _Nonnull textOptionsToolControllerOptions;
/**
  Options for the \code
  TextFontToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYTextFontToolControllerOptions * _Nonnull textFontToolControllerOptions;
/**
  Options for the \code
  TextColorToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYTextColorToolControllerOptions * _Nonnull textColorToolControllerOptions;
/**
  Options for the \code
  AdjustToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYAdjustToolControllerOptions * _Nonnull adjustToolControllerOptions;
/**
  Options for the \code
  BrushToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYBrushToolControllerOptions * _Nonnull brushToolControllerOptions;
/**
  Options for the \code
  BrushColorToolController
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYBrushColorToolControllerOptions * _Nonnull brushColorToolControllerOptions;
/**
  Options for the `FrameToolController.
*/
@property (nonatomic, readonly, strong) IMGLYFrameToolControllerOptions * _Nonnull frameToolControllerOptions;
/**
  Returns a newly allocated instance of a \code
  Configuration
  \endcode using the default builder.
*/
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Creates a newly allocated instance of \code
  Configuration
  \endcode using the given builder.
  \param builder An instance of \code
  ConfigurationBuilder
  \endcode.

*/
- (nonnull instancetype)initWithBuilder:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYConfigurationBuilder * _Nonnull))builder OBJC_DESIGNATED_INITIALIZER;
@end

@class IMGLYPhotoEditViewControllerOptionsBuilder;
@class IMGLYFilterToolControllerOptionsBuilder;
@class IMGLYStickerToolControllerOptionsBuilder;
@class IMGLYStickerOptionsToolControllerOptionsBuilder;
@class IMGLYStickerColorToolControllerOptionsBuilder;
@class IMGLYFocusToolControllerOptionsBuilder;
@class IMGLYTransformToolControllerOptionsBuilder;
@class IMGLYTextToolControllerOptionsBuilder;
@class IMGLYTextOptionsToolControllerOptionsBuilder;
@class IMGLYTextFontToolControllerOptionsBuilder;
@class IMGLYTextColorToolControllerOptionsBuilder;
@class IMGLYFrameToolControllerOptionsBuilder;

/**
  The configuration builder object offers all properties of \code
  Configuration
  \endcode in
  a mutable version, in order to build an immutable \code
  Configuration
  \endcode object. To
  further configure the different viewcontrollers, use the \code
  configureXYZViewController
  \endcode
  methods to edit the given options.
*/
SWIFT_CLASS_NAMED("ConfigurationBuilder")
@interface IMGLYConfigurationBuilder : NSObject
/**
  The background color. Defaults to black.
*/
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/**
  The background color of the accessory view. Defaults to gray.
*/
@property (nonatomic, strong) UIColor * _Nonnull accessoryViewBackgroundColor;
/**
  The color of the separator that is drawn to separate different menu items
*/
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
/**
  The progress view HUD to use to display loading messages.
*/
@property (nonatomic, strong) id <IMGLYProgressView> _Nonnull progressView;
/**
  Options for the \code
  CameraViewController
  \endcode.
*/
- (void)configureCameraViewController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYCameraViewControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  PhotoEditorViewController
  \endcode.
*/
- (void)configurePhotoEditorViewController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYPhotoEditViewControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  FilterToolController
  \endcode.
*/
- (void)configureFilterToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYFilterToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  StickerToolController
  \endcode.
*/
- (void)configureStickerToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYStickerToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  StickerOptionsToolController
  \endcode.
*/
- (void)configureStickerOptionsToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYStickerOptionsToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  StickerColorToolController
  \endcode.
*/
- (void)configureStickerColorToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYStickerColorToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  FocusToolController
  \endcode.
*/
- (void)configureFocusToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYFocusToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  TransformToolController
  \endcode.
*/
- (void)transformToolControllerOptions:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYTransformToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  TextToolController
  \endcode.
*/
- (void)configureTextToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYTextToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  TextOptionsToolController
  \endcode.
*/
- (void)configureTextOptionsToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYTextOptionsToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  TextFontToolController
  \endcode.
*/
- (void)configureTextFontToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYTextFontToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  TextColorToolController
  \endcode.
*/
- (void)configureTextColorToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYTextColorToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  AdjustToolController
  \endcode.
*/
- (void)configureAdjustToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYAdjustToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  BrushToolController
  \endcode.
*/
- (void)configureBrushToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYBrushToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  BrushToolController
  \endcode.
*/
- (void)configureBrushColorToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYBrushColorToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  TransformToolController
  \endcode.
*/
- (void)configureTransformToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYTransformToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Options for the \code
  FrameToolController
  \endcode.
*/
- (void)configureFrameToolController:(SWIFT_NOESCAPE void (^ _Nonnull)(IMGLYFrameToolControllerOptionsBuilder * _Nonnull))builder;
/**
  Use this to use a specific subclass instead of the default imglyKit <em>view controller</em> classes. This works
  across all the whole framework and allows you to subclass all usages of a class. As of now, only <em>view
  controller</em> can be replaced!
  \param builtinClass The built in class, that should be replaced.

  \param replacingClass The class that replaces the builtin class.

  \param namespace The namespace of the replacing class (e.g. Your_App). Usually
  the module name of your app. Can be found under ‘Product Module Name’
  in your app targets build settings.


  throws:
  An exception if the replacing class is not a subclass of the replaced class.
*/
- (BOOL)replaceClass:(SWIFT_METATYPE(NSObject) _Nonnull)builtinClass replacingClass:(SWIFT_METATYPE(NSObject) _Nonnull)replacingClass namespace:(NSString * _Nonnull)namespace_ error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol IMGLYCropAndStraightenViewDelegate;

/**
  The \code
  CropAndStraightenView
  \endcode class provides support for displaying, zooming, rotating and
  cropping an image.
*/
SWIFT_CLASS_NAMED("CropAndStraightenView")
@interface IMGLYCropAndStraightenView : UIView
/**
  The delegate of the \code
  CropAndStraightenView
  \endcode object.
*/
@property (nonatomic, weak) id <IMGLYCropAndStraightenViewDelegate> _Nullable delegate;
/**
  The image that is to be displayed.
*/
@property (nonatomic, strong) UIImage * _Nullable image;
/**
  The straighten angle to apply to the image in radians.
*/
@property (nonatomic) CGFloat straightenAngle;
/**
  The crop rect to apply to the image. This should be a normalized \code
  CGRect
  \endcode.
*/
@property (nonatomic) CGRect cropRect;
/**
  The orientation to apply to the image.
*/
@property (nonatomic) enum IMGLYOrientation orientation;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)layoutSubviews;
/**
  The crop rect in image dimensions.
*/
@property (nonatomic, readonly) CGRect imageCropRect;
/**
  Converts a view rect to image dimensions.
  \param viewRect The view rect to convert.


  returns:
  The crop rect in image dimensions.
*/
- (CGRect)imageCropRectForViewRect:(CGRect)viewRect;
/**
  Returns whether the user has touched the content to initiate scrolling.
  note:
  The value of this property is \code
  true
  \endcode if the user has touched the image but might
  not have yet have started dragging it.
*/
@property (nonatomic, readonly) BOOL isTracking;
/**
  Returns whether the content is moving in the view after the user lifted their finger.
  note:
  The returned value is \code
  true
  \endcode if user isn’t dragging the content but scrolling
  is still occurring.
*/
@property (nonatomic, readonly) BOOL isDecelerating;
/**
  The frame of the crop canvas.
*/
@property (nonatomic) CGRect canvasFrame;
@end


@interface IMGLYCropAndStraightenView (SWIFT_EXTENSION(imglyKit)) <UIGestureRecognizerDelegate>
/**
  :nodoc:
*/
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
@end

@class UIScrollView;

@interface IMGLYCropAndStraightenView (SWIFT_EXTENSION(imglyKit)) <UIScrollViewDelegate>
/**
  :nodoc:
*/
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/**
  :nodoc:
*/
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/**
  :nodoc:
*/
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
/**
  :nodoc:
*/
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
/**
  :nodoc:
*/
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
/**
  :nodoc:
*/
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView;
@end


/**
  The methods declared by the \code
  CropAndStraightenViewDelegate
  \endcode protocol allow the adopting
  delegate to respond to message from the \code
  CropAndStraightenView
  \endcode class and thus respond to
  operations such as tracking.
*/
SWIFT_PROTOCOL_NAMED("CropAndStraightenViewDelegate")
@protocol IMGLYCropAndStraightenViewDelegate
/**
  Called just before the crop and straighten view begins tracking.
  \param cropAndStraightenView The view that is about to begin tracking.

*/
- (void)cropAndStraightenViewWillBeginTracking:(IMGLYCropAndStraightenView * _Nonnull)cropAndStraightenView;
/**
  Called just after the crop and straighten view finished tracking.
  \param cropAndStraightenView The view that finished tracking.

*/
- (void)cropAndStraightenViewDidEndTracking:(IMGLYCropAndStraightenView * _Nonnull)cropAndStraightenView;
/**
  Called when the crop and straighten view tracked user interaction.
  \param cropAndStraightenView The view that tracked user interaction.

*/
- (void)cropAndStraightenViewDidTrack:(IMGLYCropAndStraightenView * _Nonnull)cropAndStraightenView;
@end


/**
  The \code
  CropAspect
  \endcode class is used to specify the available crop aspect ratios for the
  \code
  TransformToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("CropAspect")
@interface IMGLYCropAspect : NSObject
/**
  :nodoc:
*/
- (nonnull instancetype)init;
/**
  Creates a new instance of \code
  CropAspect
  \endcode. The aspect ratio is \code
  width
  \endcode divided by \code
  height
  \endcode.
  \param width The width of the aspect ratio.

  \param height The height of the aspect ratio.

*/
- (nonnull instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height;
/**
  Creates a new instance of \code
  CropAspect
  \endcode with a custom localized name. Usually the aspect
  ratio will be used as the name, but with this initializer it is possible to use a different
  name such as \code
  Square
  \endcode instead of \code
  1.0
  \endcode.
  \param width The width of the aspect ratio.

  \param height The height of the aspect ratio.

  \param localizedName The custom localized name for this aspect ratio.

*/
- (nonnull instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height localizedName:(NSString * _Nonnull)localizedName OBJC_DESIGNATED_INITIALIZER;
/**
  The width of the aspect ratio.
*/
@property (nonatomic, readonly) CGFloat width;
/**
  The height of the aspect ratio.
*/
@property (nonatomic, readonly) CGFloat height;
/**
  The localized name of the aspect ratio.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedName;
/**
  The calculated ratio (i.e. \code
  width / height
  \endcode).
*/
@property (nonatomic, readonly) CGFloat ratio;
/**
  Calculates the width for a given height.
  \param height The height to calculate the matching width for.


  returns:
  The width for the given height.
*/
- (CGFloat)widthForHeight:(CGFloat)height;
/**
  Calculates the height for a given width.
  \param width The width to calculate the matching height for.


  returns:
  The height for the given width.
*/
- (CGFloat)heightForWidth:(CGFloat)width;
/**
  Creates the reversed aspect ratio.
*/
@property (nonatomic, readonly, strong) IMGLYCropAspect * _Nonnull inversed;
/**
  :nodoc:
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/**
  A \code
  CropHandleView
  \endcode represents the interactive, draggable part of a crop rect.
*/
SWIFT_CLASS_NAMED("CropHandleView")
@interface IMGLYCropHandleView : UIView
/**
  Whether the handle view is at the top.
*/
@property (nonatomic, readonly) BOOL isTop;
/**
  Whether the handle view is on the left.
*/
@property (nonatomic, readonly) BOOL isLeft;
/**
  Whether the handle view is on the right.
*/
@property (nonatomic, readonly) BOOL isRight;
/**
  Whether the handle view is at the bottom.
*/
@property (nonatomic, readonly) BOOL isBottom;
/**
  Whether the handle view is a corner.
*/
@property (nonatomic, readonly) BOOL isCorner;
/**
  Whether the handle view is lateral.
*/
@property (nonatomic, readonly) BOOL isLateral;
/**
  Whether the line weight for the handle is heavy to visualize interaction.
*/
@property (nonatomic) BOOL isLineWeightHeavy;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIVisualEffectView;

/**
  A \code
  CropMaskView
  \endcode is a view that blurs the content behind it.
*/
SWIFT_CLASS_NAMED("CropMaskView")
@interface IMGLYCropMaskView : UIView
/**
  The underlying \code
  UIVisualEffectView
  \endcode.
*/
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nonnull effectView;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/**
  The \code
  CropOverlayView
  \endcode is added above the \code
  CropAndStraightenView
  \endcode to display the UI elements to
  adjust the crop rect and hosts the mask views to dim the content that is outside the crop rect.
*/
SWIFT_CLASS_NAMED("CropOverlayView")
@interface IMGLYCropOverlayView : UIView
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Whether the masked content is currently visible.
*/
@property (nonatomic) BOOL isMaskedContentVisible;
/**
  Hides or shows the masked content.
  \param visible Whether the masked content should be visible.

  \param animated Whether to animate the change.

*/
- (void)setMaskedContentVisible:(BOOL)visible animated:(BOOL)animated;
/**
  The frame of the crop rect.
*/
@property (nonatomic) CGRect cropRect;
/**
  Whether the crop grid is currently visible.
*/
@property (nonatomic) BOOL isCropGridVisible;
/**
  Hides or shows the crop grid.
  \param visible Whether the crop grid should be visible.

  \param animated Whether to animate the change.

*/
- (void)setCropGridVisible:(BOOL)visible animated:(BOOL)animated;
/**
  Whether the straighten grid is currently visible.
*/
@property (nonatomic) BOOL isStraightenGridVisible;
/**
  Hides or shows the straighten grid.
  \param visible Whether the straighten grid should be visible.

  \param animated Whether to animate the change.

*/
- (void)setStraightenGridVisible:(BOOL)visible animated:(BOOL)animated;
@end

@class IMGLYFrameImageGroup;
enum FrameLayoutMode : NSInteger;

/**
  The configutation fot the build engine.
*/
SWIFT_CLASS_NAMED("CustomPatchConfiguration")
@interface IMGLYCustomPatchConfiguration : NSObject
/**
  The top image group.
*/
@property (nonatomic, strong) IMGLYFrameImageGroup * _Nullable topImageGroup;
/**
  The lefe image group.
*/
@property (nonatomic, strong) IMGLYFrameImageGroup * _Nullable leftImageGroup;
/**
  The bottom image group.
*/
@property (nonatomic, strong) IMGLYFrameImageGroup * _Nullable bottomImageGroup;
/**
  The right image group.
*/
@property (nonatomic, strong) IMGLYFrameImageGroup * _Nullable rightImageGroup;
/**
  The layout mode.
*/
@property (nonatomic) enum FrameLayoutMode layoutMode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Every frame builder must implament this protocol.
*/
SWIFT_PROTOCOL_NAMED("FrameBuilder")
@protocol IMGLYFrameBuilderProtocol
/**
  Builds an asset following the configuration settings, for the chosen size.
  \param size The desired size of the output image.

  \param relativeScale The scale of the frame, relative the minimum of width and height.


  returns:
  The resulting asset.
*/
- (UIImage * _Nullable)buildWithSize:(CGSize)size relativeScale:(CGFloat)relativeScale;
@end


/**
  A frambuilder for custom patches.
  Each patch consists of four groups. There are two basic layouts.
  The first one places the top and bottom group above the full width of the image,
  and the left and right group in between. The second layout works the other way around.
*/
SWIFT_CLASS_NAMED("CustomPatchFrameBuilder")
@interface IMGLYCustomPatchFrameBuilder : NSObject <IMGLYFrameBuilderProtocol>
/**
  Returns a newly allocated instance of \code
  CustomPatchFrameBuilder
  \endcode.
  \param configuration The configutation to use.

*/
- (nonnull instancetype)initWithConfiguration:(IMGLYCustomPatchConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/**
  Builds an asset following the configuration settings, for the chosen size.
  \param size The desired size of the output image.

  \param relativeScale The scale of the frame, relative the minimum of width and height.


  returns:
  The resulting asset.
*/
- (UIImage * _Nullable)buildWithSize:(CGSize)size relativeScale:(CGFloat)relativeScale;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This class provides the methods to generate the dynamic frame-builders provided by the SDK.
*/
SWIFT_CLASS_NAMED("DefaultDynamicFrames")
@interface IMGLYDefaultDynamicFrames : NSObject
/**
  Returns the builder for the ‘art1’ frame.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IMGLYCustomPatchFrameBuilder * _Nonnull art1FrameBuilder;)
+ (IMGLYCustomPatchFrameBuilder * _Nonnull)art1FrameBuilder;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  To use a custom progress HUD when saving a photo or while downloading stickers etc., your
  progress view must implement this protocol.
*/
SWIFT_PROTOCOL_NAMED("ProgressView")
@protocol IMGLYProgressView
/**
  Displays the progress HUD with the given message.
  \param message The message to display in the progress HUD.

*/
- (void)showWithMessage:(NSString * _Nonnull)message;
/**
  Hides the progress HUD.
*/
- (void)hide;
@end


/**
  A \code
  ProgressView
  \endcode is an activity indicator that is shown on top of all other views in a HUD style
  and temporarily blocks all user interaction with other views.
*/
SWIFT_CLASS_NAMED("DefaultProgressView")
@interface IMGLYDefaultProgressView : NSObject <IMGLYProgressView>
/**
  The main container view of the progress view.
*/
@property (nonatomic, strong) UIView * _Nonnull overlayView;
/**
  The background view that is being animated in.
*/
@property (nonatomic, strong) UIView * _Nonnull backgroundView;
/**
  The image view that holds the spinner.
*/
@property (nonatomic, strong) UIImageView * _Nonnull imageView;
/**
  The label that contains the loading message.
*/
@property (nonatomic, strong) UILabel * _Nonnull label;
/**
  The duration of one rotation of the spinner.
*/
@property (nonatomic) double animationDuration;
/**
  The text that should be displayed in the progress view.
*/
@property (nonatomic, copy) NSString * _Nonnull text;
/**
  A shared instance for convenience.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IMGLYDefaultProgressView * _Nonnull sharedView;)
+ (IMGLYDefaultProgressView * _Nonnull)sharedView;
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Presents the activity indicator with the given message.
  \param message The message to present.

*/
- (void)showWithMessage:(NSString * _Nonnull)message;
/**
  Hides the activity indicator.
*/
- (void)hide;
@end

@class IMGLYToolbarButton;

/**
  A \code
  ToolbarItem
  \endcode hosts views which are displayed in the \code
  toolbar
  \endcode of a \code
  ToolbarController
  \endcode.
  If the toolbar controller is embedded into an \code
  UINavigationController
  \endcode, those views are added
  to the navigation controller’s navigation bar.
*/
SWIFT_CLASS_NAMED("ToolbarItem")
@interface IMGLYToolbarItem : NSObject
/**
  The title view is displayed in the center of the toolbar or navigation bar.
*/
@property (nonatomic, strong) UIView * _Nullable titleView;
/**
  The left button is displayed on the left side of the toolbar or navigation bar.
*/
@property (nonatomic, strong) IMGLYToolbarButton * _Nullable leftButton;
/**
  The right button is displayed on the right side of the toolbar or navigation bar.
*/
@property (nonatomic, strong) IMGLYToolbarButton * _Nullable rightButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A \code
  DefaultToolbarItem
  \endcode is a toolbar item with a label in the center and a default discard
  button on the left and apply button on the right. It is used in most tool controllers.
*/
SWIFT_CLASS_NAMED("DefaultToolbarItem")
@interface IMGLYDefaultToolbarItem : IMGLYToolbarItem
/**
  The title label of the item.
*/
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
/**
  The default discard button on the left.
*/
@property (nonatomic, strong) IMGLYToolbarButton * _Nonnull discardButton;
/**
  The default apply button on the right.
*/
@property (nonatomic, strong) IMGLYToolbarButton * _Nonnull applyButton;
/**
  :nodoc:
*/
@property (nonatomic, strong) UIView * _Nullable titleView;
/**
  :nodoc:
*/
@property (nonatomic, strong) IMGLYToolbarButton * _Nullable leftButton;
/**
  :nodoc:
*/
@property (nonatomic, strong) IMGLYToolbarButton * _Nullable rightButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Used to determine device orientation even if orientation lock is active.
*/
SWIFT_CLASS_NAMED("DeviceOrientationController")
@interface IMGLYDeviceOrientationController : NSObject
/**
  Starts to observe the accelerometer to update the capture video orientation.
  This needs to be done, to capture with the correct device orientation.
*/
- (void)start;
/**
  Stops observing the acceleronmenter.
*/
- (void)stop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class IMGLYGradientView;

/**
  A \code
  FilterCollectionViewCell
  \endcode is a cell that shows an image (usually with a filter applied to it)
  and a label at the bottom. When selected the cell has an overlay, a label for the intensity and
  an selection indicator.
*/
SWIFT_CLASS_NAMED("FilterCollectionViewCell")
@interface IMGLYFilterCollectionViewCell : UICollectionViewCell
/**
  The image view that display the image.
*/
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/**
  A gradient from transparent to black that is behind the label for better readability.
*/
@property (nonatomic, readonly, strong) IMGLYGradientView * _Nonnull gradientView;
/**
  A label at the bottom of the cell
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull captionLabel;
/**
  An activity indicator that is centered above the image and usually only shown while the image is loading.
*/
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Nonnull activityIndicator;
/**
  An overlay that is visible when the cell is selected
*/
@property (nonatomic, readonly, strong) IMGLYGradientView * _Nonnull selectionOverlay;
/**
  A selection indicator at the bottom of the cell.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull selectionIndicator;
/**
  A label that is visible when the cell is selected.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull selectionLabel;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)tintColorDidChange;
/**
  :nodoc:
*/
- (void)prepareForReuse;
/**
  :nodoc:
*/
@property (nonatomic, setter=setSelected:) BOOL isSelected;
/**
  :nodoc:
*/
@property (nonatomic, setter=setHighlighted:) BOOL isHighlighted;
@end


/**
  A \code
  FilterSelectionController
  \endcode contains everything that is needed to display a list of available filters.
*/
SWIFT_CLASS_NAMED("FilterSelectionController")
@interface IMGLYFilterSelectionController : NSObject
/**
  The collection view that presents all available filters.
*/
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;
/**
  This block is called when a new photo effect is selected.
*/
@property (nonatomic, copy) void (^ _Nullable selectedBlock)(IMGLYPhotoEffect * _Nonnull);
/**
  This block is used to determine the currently applied photo effect.
*/
@property (nonatomic, copy) IMGLYPhotoEffect * _Nullable (^ _Nullable activePhotoEffectBlock)(void);
/**
  This block is used to configure the filter collection view cell.
*/
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(IMGLYFilterCollectionViewCell * _Nonnull, IMGLYPhotoEffect * _Nonnull);
/**
  :nodoc:
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of a \code
  FilterSelectionController
  \endcode using the given input image.
  \param inputImage The input image that should be used to preview the filters.


  returns:
  An instance of a \code
  FilterSelectionController
  \endcode.
*/
- (nonnull instancetype)initWithInputImage:(UIImage * _Nullable)inputImage OBJC_DESIGNATED_INITIALIZER;
/**
  Updates the cell selection based on the \code
  activePhotoEffectBlock
  \endcode.
  \param animated If \code
  true
  \endcode the selection will be animated.

*/
- (void)updateSelectionWithAnimated:(BOOL)animated;
@end


@interface IMGLYFilterSelectionController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYFilterSelectionController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/**
  A \code
  FilterToolController
  \endcode is reponsible for displaying the UI to apply an effect filter to an image.
*/
SWIFT_CLASS_NAMED("FilterToolController")
@interface IMGLYFilterToolController : IMGLYStackLayoutToolController
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)updateViewConstraints;
/**
  :nodoc:
*/
- (void)photoEditModelDidChange;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYFilterToolController (SWIFT_EXTENSION(imglyKit))
@end


/**
  Options for configuring a \code
  FilterToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("FilterToolControllerOptions")
@interface IMGLYFilterToolControllerOptions : IMGLYToolControllerOptions
/**
  This closure can be used to configure the filter intensity slider.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(IMGLYSlider * _Nonnull);
/**
  This closure can be used to configure the filter intensity slider’s container view.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);
/**
  Enable/Disable the filter intensity slider. Defaults to true.
*/
@property (nonatomic, readonly) BOOL showFilterIntensitySlider;
/**
  The intensity that should be initialy applied to a filter when selecting it. Defaults to 75 %.
*/
@property (nonatomic, readonly) CGFloat initialFilterIntensity;
- (CGFloat)initialFilterIntensity SWIFT_METHOD_FAMILY(none);
/**
  This closure is called every time the user selects a filter.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable filterSelectedClosure)(IMGLYPhotoEffect * _Nonnull);
/**
  This closure will be called whenever the value of the slider changes. The \code
  Slider
  \endcode and the
  selected instance of \code
  PhotoEffect
  \endcode will be passed as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensityChangedClosure)(IMGLYSlider * _Nonnull, IMGLYPhotoEffect * _Nonnull);
/**
  This closure allows further configuration of the filter cells. The closure is called for
  each filter cell and has the cell and its corresponding instance of \code
  PhotoEffect
  \endcode as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable filterCellConfigurationClosure)(IMGLYFilterCollectionViewCell * _Nonnull, IMGLYPhotoEffect * _Nonnull);
/**
  Returns a newly allocated instance of a \code
  FilterToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of a \code
  FilterToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of a \code
  FilterToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  FilterToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of a \code
  FilterToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYFilterToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  FilterToolControllerOptionsBuilder
  \endcode for \code
  FilterToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("FilterToolControllerOptionsBuilder")
@interface IMGLYFilterToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  This closure can be used to configure the filter intensity slider.
*/
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(IMGLYSlider * _Nonnull);
/**
  This closure can be used to configure the filter intensity slider’s container view.
*/
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);
/**
  Enable/Disable the filter intensity slider. Defaults to true.
*/
@property (nonatomic) BOOL showFilterIntensitySlider;
/**
  The intensity that should be initialy applied to a filter when selecting it. Defaults to 75 %.
*/
@property (nonatomic) CGFloat initialFilterIntensity;
- (CGFloat)initialFilterIntensity SWIFT_METHOD_FAMILY(none);
/**
  This closure is called every time the user selects a filter.
*/
@property (nonatomic, copy) void (^ _Nullable filterSelectedClosure)(IMGLYPhotoEffect * _Nonnull);
/**
  This closure will be called whenever the value of the slider changes. The \code
  Slider
  \endcode and the
  selected instance of \code
  PhotoEffect
  \endcode will be passed as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable filterIntensityChangedClosure)(IMGLYSlider * _Nonnull, IMGLYPhotoEffect * _Nonnull);
/**
  This closure allows further configuration of the filter cells. The closure is called for
  each filter cell and has the cell and its corresponding instance of \code
  PhotoEffect
  \endcode as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable filterCellConfigurationClosure)(IMGLYFilterCollectionViewCell * _Nonnull, IMGLYPhotoEffect * _Nonnull);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface IMGLYFocusGradientView (SWIFT_EXTENSION(imglyKit)) <UIGestureRecognizerDelegate>
/**
  :nodoc:
*/
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
@end


/**
  A \code
  FocusToolController
  \endcode is reponsible for displaying the UI to adjust the focus of an image.
*/
SWIFT_CLASS_NAMED("FocusToolController")
@interface IMGLYFocusToolController : IMGLYStackLayoutToolController
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)updateViewConstraints;
/**
  :nodoc:
*/
- (void)viewWillAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)photoEditModelDidChange;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYFocusToolController (SWIFT_EXTENSION(imglyKit))
@end


@interface IMGLYFocusToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>
/**
  :nodoc:
*/
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYFocusToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYFocusToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYFocusToolController (SWIFT_EXTENSION(imglyKit))
@end


/**
  Options for configuring a \code
  FocusToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("FocusToolControllerOptions")
@interface IMGLYFocusToolControllerOptions : IMGLYToolControllerOptions
/**
  This closure allows further configuration of the focus type buttons. The closure is called for
  each focus type button and has the button and its corresponding focus type as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable focusTypeButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, enum IMGLYFocusType);
/**
  This closure is called when the user selects a focus type.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable focusTypeSelectedClosure)(enum IMGLYFocusType);
/**
  This closure can be used to configure the slider.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(IMGLYSlider * _Nonnull);
/**
  This closure can be used to configure the view that contains the slider.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/**
  This closure is called whenever the slider changes its value. The instance of \code
  Slider
  \endcode and
  the active focus type are passed as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable sliderChangedValueClosure)(IMGLYSlider * _Nonnull, enum IMGLYFocusType);
/**
  This closure can be used to configure the circle gradient view.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable circleGradientViewConfigurationClosure)(IMGLYCircleGradientView * _Nonnull);
/**
  This closure can be used to configure the box gradient view.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable boxGradientViewConfigurationClosure)(IMGLYBoxGradientView * _Nonnull);
/**
  Returns a newly allocated instance of a \code
  FocusToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of a \code
  FocusToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of a \code
  FocusToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  FocusToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of a \code
  FocusToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYFocusToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  FocusToolControllerOptionsBuilder
  \endcode for \code
  FocusToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("FocusToolControllerOptionsBuilder")
@interface IMGLYFocusToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  This closure allows further configuration of the focus type buttons. The closure is called for
  each focus type button and has the button and its corresponding focus type as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable focusTypeButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, enum IMGLYFocusType);
/**
  This closure is called when the user selects a focus type.
*/
@property (nonatomic, copy) void (^ _Nullable focusTypeSelectedClosure)(enum IMGLYFocusType);
/**
  This closure can be used to configure the slider.
*/
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(IMGLYSlider * _Nonnull);
/**
  This closure can be used to configure the view that contains the slider.
*/
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);
/**
  This closure is called whenever the slider changes its value. The instance of \code
  Slider
  \endcode and
  the active focus type are passed as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(IMGLYSlider * _Nonnull, enum IMGLYFocusType);
/**
  This closure can be used to configure the circle gradient view.
*/
@property (nonatomic, copy) void (^ _Nullable circleGradientViewConfigurationClosure)(IMGLYCircleGradientView * _Nonnull);
/**
  This closure can be used to configure the box gradient view.
*/
@property (nonatomic, copy) void (^ _Nullable boxGradientViewConfigurationClosure)(IMGLYBoxGradientView * _Nonnull);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYFocusToolControllerOptionsBuilder (SWIFT_EXTENSION(imglyKit))
/**
  An array of \code
  IMGLYFocusType
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedFocusTypes
  \endcode with the corresponding \code
  IMGLYFocusType
  \endcode values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedFocusTypesAsNSNumbers;
@end

/**
  Represents the type of focus that should be used in an image.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, IMGLYFocusType, "FocusType") {
/**
  Focus should be disabled.
*/
  IMGLYFocusTypeOff = 0,
/**
  A linear focus should be used.
*/
  IMGLYFocusTypeLinear = 1,
/**
  A radial focus should be used.
*/
  IMGLYFocusTypeRadial = 2,
};


/**
  A \code
  Font
  \endcode represents meta information about a font, that should be loaded into the SDK.
  If a font has a long name, the \code
  displayName
  \endcode can be used to substitude it within the UI.
  The font name is used by iOS to identify the font. This is usualy the filename of the font.
  But it can be different. To be sure use the font in a sandbox project, and get its ‘fontName’ attribute.
*/
SWIFT_CLASS_NAMED("Font")
@interface IMGLYFont : NSObject
/**
  The path to the font, e.g. path within a bundle. This is not needed when using
  system fonts.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
/**
  Some font names are long and rather ugly. In that case it is possible to add an entry to
  this dictionary, the key being the name of the font and the value being the name that
  should be used instead.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/**
  The name of the font.
*/
@property (nonatomic, copy) NSString * _Nonnull fontName;
/**
  Creates a font from the given font path, with the display name.
  The font name will be used as argument for the \code
  UIFont
  \endcode initializer,
  therefor the name does not necessarily need to equal the filename,
  but rather the font family. Please refer to the official apple documentation for details.
  If you have trouble loading a font, please set up a test project,
  and try to load the font using \code
  UIFont
  \endcode, or use the interface builder to load the font,
  and print out the \code
  fontName
  \endcode.
  \param fontPath The path to the font, e.g. path within a bundle.

  \param displayName The name for the font that is used within the UI.

*/
- (nonnull instancetype)initWithPath:(NSString * _Nonnull)path displayName:(NSString * _Nonnull)displayName fontName:(NSString * _Nonnull)fontName OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a font with the given name and display name.
  This initializer should be used when adding system fonts.
  The font name will be used as argument for the UIFont initializer.
  \param displayName The name for the font that is used within the UI.

  \param fontName The actual name of the font.

*/
- (nonnull instancetype)initWithDisplayName:(NSString * _Nonnull)displayName fontName:(NSString * _Nonnull)fontName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Provides functions to import fonts added as resources. It also registers them,
  so that the application can load them like any other pre-installed font.
*/
SWIFT_CLASS_NAMED("FontImporter")
@interface IMGLYFontImporter : NSObject
/**
  This array contains all availanle fonts. It can be set via the \code
  Configuration
  \endcode class.
  If it is empty, the default fonts will be load.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<IMGLYFont *> * _Nonnull fonts;)
+ (NSArray<IMGLYFont *> * _Nonnull)fonts;
+ (void)setFonts:(NSArray<IMGLYFont *> * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol IMGLYFontSelectorViewDelegate;

/**
  The \code
  FontSelectorView
  \endcode is a subclass of \code
  UIScrollView
  \endcode that presents a scrollable list of fonts.
*/
SWIFT_CLASS_NAMED("FontSelectorView")
@interface IMGLYFontSelectorView : UIScrollView
/**
  The receiver’s delegate.
  seealso:
  \code
  FontSelectorViewDelegate
  \endcode.
*/
@property (nonatomic, weak) id <IMGLYFontSelectorViewDelegate> _Nullable selectorDelegate;
/**
  The text color for the fonts.
*/
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/**
  The text color for the font’s label.
*/
@property (nonatomic, strong) UIColor * _Nonnull labelColor;
/**
  The name of the currently selected font.
*/
@property (nonatomic, copy) NSString * _Nullable selectedFontName;
/**
  The preview text.
*/
@property (nonatomic, copy) NSString * _Nullable text;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)tintColorDidChange;
/**
  :nodoc:
*/
- (void)layoutSubviews;
@end


/**
  The \code
  FontSelectorViewDelegate
  \endcode protocol defines methods that allow you to respond to the events
  of an instance of \code
  FontSelectorView
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("FontSelectorViewDelegate")
@protocol IMGLYFontSelectorViewDelegate
/**
  Called when a font was selected in the font selector view.
  \param fontSelectorView The font selector view that the font was selected in.

  \param fontName The name of the font that was selected.

*/
- (void)fontSelectorView:(IMGLYFontSelectorView * _Nonnull)fontSelectorView didSelectFontWithName:(NSString * _Nonnull)fontName;
@end


/**
  Builds a four patch frame, by spiltting the frame asset in four pieces and
  paint it onto the \code
  UIImage
  \endcode. The pieces are cropped at the insides to match the
  image ratio. The input image must have a ratio of 1:1. The algorithm to place and crop,
  each piece, leaves the sides of the asset uncropped that touch the longer side of the image.
  The other sides get cropped, starting from the middle, so that the corners of the asset,
  is touching the corners of the composet image. One could say the asset that is used as base,
  for the composition is pushed together along the x or y axis, depending on the ratio of,
  the given size.
*/
SWIFT_CLASS_NAMED("FourPatchFrameBuilder")
@interface IMGLYFourPatchFrameBuilder : NSObject <IMGLYFrameBuilderProtocol>
/**
  Builds a four patch frame, by spiltting the frame asset in four pieces and
  paint it onto the \code
  UIImage
  \endcode. The pieces are cropped at the insides to match the
  image ratio. The input image must have a ratio of 1:1. The algorithm to place and crop,
  each piece, leaves the sides of the asset uncropped that touch the longer side of the image.
  The other sides get cropped, starting from the middle, so that the corners of the asset,
  is touching the corners of the composet image. One could say the asset that is used as base,
  for the composition is pushed together along the x or y axis, depending on the ratio of,
  the given size.
  \param size Size of the targed \code
  UIImage
  \endcode.

  \param relativeScale not implemented yet.


  returns:
  Returns an \code
  UIImage
  \endcode containing the composed frame asset.
*/
- (UIImage * _Nullable)buildWithSize:(CGSize)size relativeScale:(CGFloat)relativeScale;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A \code
  Frame
  \endcode represents a unique frame, which can have multiple images for different aspect ratios.
  The matching image for the current aspect ratio will be used automatically. Each frame neeeds at
  least one image and one thumbnail image. If no thumbnail is provide, it is automatically generated.
*/
SWIFT_CLASS_NAMED("Frame")
@interface IMGLYFrame : NSObject
/**
  The amount by which the image should be inset when this frame is applied. The inset is
  specified as a value relative to the smaller side of the image.
*/
@property (nonatomic) UIEdgeInsets imageInsets;
/**
  This indicates if a Frame is dynamic. A dynamic frame is composed of other images,
  and therefore it can be adjusted to fit every ratio.
*/
@property (nonatomic, readonly) BOOL isDynamic;
/**
  Returns a newly allocated \code
  FrameBuilder
  \endcode. Use this initializer for dynamic frames.
  \param frameBuilder The builder that will build the frame.

  \param relativeScale The relative scale of the frame. Relative to the shorter side of an image.

  \param thumbnailURL A \code
  URL
  \endcode for the thumbnail asset.

*/
- (nonnull instancetype)initWithFrameBuilder:(id <IMGLYFrameBuilderProtocol> _Nonnull)frameBuilder relativeScale:(CGFloat)relativeScale thumbnailURL:(NSURL * _Nonnull)thumbnailURL OBJC_DESIGNATED_INITIALIZER;
/**
  Returns a newly allocated \code
  FrameBuilder
  \endcode. Use this initializer for dynamic frames.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Adds an image for a given ratio to this frame.
  \param imageURL The url for the frame’s full size image. This can be a file url or a remote
  /    url.

  \param thumbnailURL The url for the frame’s thumbnail image. This can be a file url or a
  remote url.

  \param ratio The ratio that this image should be used for.

*/
- (void)addImage:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL forRatio:(CGFloat)ratio;
/**
  The image url for a given ratio.
  \param ratio The ratio to get the image url for.

  \param tolerance The tolerance that is used to pick the correct image based on the
  aspect ratio.


  returns:
  An image url or \code
  nil
  \endcode.
*/
- (NSURL * _Nullable)imageURLForRatio:(CGFloat)ratio withTolerance:(CGFloat)tolerance;
/**
  The mask image url for a given ratio.
  \param ratio The ratio to get the image url for.

  \param tolerance The tolerance that is used to pick the correct image based on the
  aspect ratio.


  returns:
  An image url or \code
  nil
  \endcode.
*/
- (NSURL * _Nullable)maskImageURLForRatio:(CGFloat)ratio withTolerance:(CGFloat)tolerance;
/**
  Generates a frame asset for the given size, using a \code
  FrameBuilder
  \endcode.
  \param size The desired size.


  returns:
  A the generated asset.
*/
- (UIImage * _Nullable)imageForSize:(CGSize)size;
/**
  This method is out to generate a thumbnail of a dynamic frame.
  After generation, the image is saved to the photo album.
  \param size The desired size.

*/
- (void)saveThumbnailToCameraRollForSize:(CGSize)size;
/**
  The thumbnail url for a given ratio.
  \param ratio The ratio to get the thumbnail url for.

  \param tolerance The tolerance that is used to pick the correct image based on the
  aspect ratio.


  returns:
  A thumbnail url or \code
  nil
  \endcode.
*/
- (NSURL * _Nullable)thumbnailURLForRatio:(CGFloat)ratio withTolerance:(CGFloat)tolerance;
/**
  Checks whether a frame has an image added for a given ratio.
  \param ratio The ratio to check.

  \param tolerance The tolerance that is used to pick the correct image based on the
  aspect ratio.


  returns:
  \code
  true
  \endcode if an image for this ratio was added, \code
  false
  \endcode otherwise.
*/
- (BOOL)hasImageForRatio:(CGFloat)ratio withTolerance:(CGFloat)tolerance;
/**
  Creates the default frames that are shipped with the SDK.

  returns:
  An array of frames.
*/
+ (NSArray<IMGLYFrame *> * _Nonnull)createDefaultFrames;
@end

/**
  This enum is used during the builder to detmin the current phase.
*/
typedef SWIFT_ENUM(NSInteger, FrameBuildMode) {
/**
  Used to indicate the horizontal phase.
*/
  FrameBuildModeHorizontal = 0,
/**
  Used to indicate the vertical phase.
*/
  FrameBuildModeVertical = 1,
};


@class IMGLYIconBorderedCollectionViewCell;

/**
  A frame data source provides the frames that should be displayed in the frame tool.
*/
SWIFT_CLASS_NAMED("FrameDataSource")
@interface IMGLYFrameDataSource : NSObject
/**
  The collection view of this data source.
*/
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;
/**
  The currently used image aspect ratio.
*/
@property (nonatomic) CGFloat ratio;
/**
  The tolerance that is used to pick the correct frame image based on the aspect ratio. Defaults
  to \code
  0.1
  \endcode.
*/
@property (nonatomic) CGFloat tolerance;
/**
  The frames to display.
*/
@property (nonatomic, copy) NSArray<IMGLYFrame *> * _Nullable allFrames;
/**
  Get all frames matching the set ratio and tolerance.
*/
@property (nonatomic, readonly, copy) NSArray<IMGLYFrame *> * _Nullable matchingFrames;
/**
  A closure that is called to modify the ‘No Frame’ cell.
*/
@property (nonatomic, copy) void (^ _Nullable noFrameCellConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull);
/**
  A closure that is called to modify the cell for a given frame.
*/
@property (nonatomic, copy) void (^ _Nullable frameCellConfigurationClosure)(IMGLYIconBorderedCollectionViewCell * _Nonnull, IMGLYFrame * _Nonnull);
/**
  Creates a new frame data source for the given collection view.
  \param collectionView The collection view of this data source.

*/
- (nonnull instancetype)initWithCollectionView:(UICollectionView * _Nonnull)collectionView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface IMGLYFrameDataSource (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSourcePrefetching>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView prefetchItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView cancelPrefetchingForItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
@end


@interface IMGLYFrameDataSource (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

enum FrameTileMode : NSInteger;

/**
  This class represents a group of the images.
*/
SWIFT_CLASS_NAMED("FrameImageGroup")
@interface IMGLYFrameImageGroup : NSObject
/**
  The image placed at the start.
*/
@property (nonatomic, strong) UIImage * _Nullable startImage;
/**
  The image placed in the middle.
*/
@property (nonatomic, strong) UIImage * _Nullable midImage;
/**
  The image placed at the end.
*/
@property (nonatomic, strong) UIImage * _Nullable endImage;
/**
  The tiling mode for the image in the middle.
*/
@property (nonatomic) enum FrameTileMode midImageMode;
/**
  The scale of the frame relative to the shorter side of the image.
*/
@property (nonatomic) CGFloat relativeScale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/**
  Each patch consists of four groups. There are two basic layouts.
  The first one places the top and bottom group above the full width of the image,
  and the left and right group in between. The second layout works the other way around.
  This enum determins, what groups will be placed ‘inside’.
*/
typedef SWIFT_ENUM(NSInteger, FrameLayoutMode) {
/**
  Sets the horizontal groups inside.
*/
  FrameLayoutModeHorizontalInside = 0,
/**
  Sets the vertical group inside.
*/
  FrameLayoutModeVerticalInside = 1,
};

/**
  The overlay actions that can be used in an instance of \code
  FrameToolController
  \endcode.
  <ul>
    <li>
      BringToFront:     Bring the frame to the front.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, FrameOverlayAction) {
/**
  Bring the frame to the front.
*/
  FrameOverlayActionBringToFront = 0,
};

/**
  This enum is used to set the the tiling mode to strech or repeat.
*/
typedef SWIFT_ENUM(NSInteger, FrameTileMode) {
/**
  When this mode is set, the tile is stretech to fit its rect.
*/
  FrameTileModeStretch = 0,
/**
  When this mode is set, the tile is repeated to fit its rect.
*/
  FrameTileModeRepeat = 1,
};


/**
  A \code
  FrameToolController
  \endcode is reponsible for displaying the UI to add a frame to an image.
*/
SWIFT_CLASS_NAMED("FrameToolController")
@interface IMGLYFrameToolController : IMGLYStackLayoutToolController
/**
  The frame data source that is associated with this view controller.
*/
@property (nonatomic, strong) IMGLYFrameDataSource * _Nullable frameDataSource;
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewWillAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidLayoutSubviews;
/**
  :nodoc:
*/
- (void)willBecomeActiveTool;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
/**
  :nodoc:
*/
- (void)didResignActiveTool;
/**
  :nodoc:
*/
@property (nonatomic, readonly) BOOL wantsDefaultPreviewView;
/**
  :nodoc:
*/
@property (nonatomic, readonly) CGFloat preferredDefaultPreviewViewScale;
/**
  :nodoc:
*/
- (void)photoEditModelDidChange;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYFrameToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate, UICollectionViewDelegateFlowLayout>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  :nodoc:
*/
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYFrameToolController (SWIFT_EXTENSION(imglyKit))
@end


@interface IMGLYFrameToolController (SWIFT_EXTENSION(imglyKit)) <UIScrollViewDelegate>
/**
  :nodoc:
*/
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/**
  :nodoc:
*/
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView;
@end


/**
  Options for configuring a \code
  FrameToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("FrameToolControllerOptions")
@interface IMGLYFrameToolControllerOptions : IMGLYToolControllerOptions
/**
  This closure is called when the user selects a frame. The closure is passed \code
  nil
  \endcode when no frame
  was selected.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable selectedFrameClosure)(IMGLYFrame * _Nullable);
/**
  The tolerance that is used to pick the correct frame image based on the aspect ratio. Defaults
  to \code
  0.1
  \endcode.
*/
@property (nonatomic, readonly) CGFloat tolerance;
/**
  This closure allows further customization of the ‘No Frame’ cell.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable noFrameCellConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull);
/**
  This closure allows further customization of the cells of a frame.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable frameCellConfigurationClosure)(IMGLYIconBorderedCollectionViewCell * _Nonnull, IMGLYFrame * _Nonnull);
/**
  This closure is called when installing the frame data source. You can use it
  to save a reference to the frame data source.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable frameDataSourceConfigurationClosure)(IMGLYFrameDataSource * _Nonnull);
/**
  This closure allows further configuration of the overlay buttons. The closure is called for
  each button and has the button and its corresponding enum value as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(IMGLYOverlayButton * _Nonnull, enum FrameOverlayAction);
/**
  This closure is called when the user selects an action.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable frameOverlayActionSelectedClosure)(enum FrameOverlayAction);
/**
  Creates a newly allocated instance of \code
  FrameToolControllerOptions
  \endcode using the default builder.
*/
- (nonnull instancetype)init;
/**
  Creates a newly allocated instance of \code
  FrameToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  FrameToolControllerOptionsBuilder
  \endcode instance.

*/
- (nonnull instancetype)initWithBuilder:(IMGLYFrameToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  FrameToolControllerOptionsBuilder
  \endcode for \code
  FrameToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("FrameToolControllerOptionsBuilder")
@interface IMGLYFrameToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  This closure is called when the user selects a frame. The closure is passed \code
  nil
  \endcode when no frame
  was selected.
*/
@property (nonatomic, copy) void (^ _Nullable selectedFrameClosure)(IMGLYFrame * _Nullable);
/**
  The tolerance that is used to pick the correct frame image based on the aspect ratio. Defaults
  to \code
  0.1
  \endcode.
*/
@property (nonatomic) CGFloat tolerance;
/**
  This closure allows further customization of the ‘No Frame’ cell.
*/
@property (nonatomic, copy) void (^ _Nullable noFrameCellConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull);
/**
  This closure allows further customization of the cells of a frame.
*/
@property (nonatomic, copy) void (^ _Nullable frameCellConfigurationClosure)(IMGLYIconBorderedCollectionViewCell * _Nonnull, IMGLYFrame * _Nonnull);
/**
  This closure is called when installing the frame data source. You can use it
  to save a reference to the frame data source.
*/
@property (nonatomic, copy) void (^ _Nullable frameDataSourceConfigurationClosure)(IMGLYFrameDataSource * _Nonnull);
/**
  This closure allows further configuration of the overlay buttons. The closure is called for
  each button and has the button and its corresponding enum value as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(IMGLYOverlayButton * _Nonnull, enum FrameOverlayAction);
/**
  This closure is called when the user selects an action.
*/
@property (nonatomic, copy) void (^ _Nullable frameOverlayActionSelectedClosure)(enum FrameOverlayAction);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYFrameToolControllerOptionsBuilder (SWIFT_EXTENSION(imglyKit))
/**
  An array of \code
  FrameOverlayAction
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedFrameOverlayActions
  \endcode with the corresponding \code
  FrameOverlayAction
  \endcode values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedFrameOverlayActionsAsNSNumbers;
@end


/**
  A \code
  Tool
  \endcode is an abstract base class. Currently \code
  FreehandTool
  \endcode is the only concrete subclass and
  it is used to handle touch events and draw primitives.
*/
SWIFT_CLASS_NAMED("Tool")
@interface IMGLYTool : NSObject
/**
  \code
  true
  \endcode if touch events occurred, \code
  false
  \endcode otherwise.
*/
@property (nonatomic, readonly) BOOL moved;
/**
  Called at the beginning of a touch event.
  \param recognizer The recognizer that recognized the event.

*/
- (void)gestureBegan:(UIGestureRecognizer * _Nonnull)recognizer;
/**
  Called multiple times during a touch event.
  \param recognizer The recognizer that recognized the event.

*/
- (void)gestureMoved:(UIGestureRecognizer * _Nonnull)recognizer;
/**
  Called when a touch event ended.
  \param recognizer The recognizer that recognized the event.

*/
- (void)gestureEnded:(UIGestureRecognizer * _Nonnull)recognizer;
/**
  Called when a touch event canceled.
  \param recognizer The recognizer that recognized the event.

*/
- (void)gestureCanceled:(UIGestureRecognizer * _Nonnull)recognizer;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A \code
  FreehandTool
  \endcode is responsible for creating vertices for a freehand drawing.
*/
SWIFT_CLASS_NAMED("FreehandTool")
@interface IMGLYFreehandTool : IMGLYTool
/**
  The color that should be used for this drawing.
*/
@property (nonatomic, strong) UIColor * _Nonnull color;
/**
  The brush that should be used for this drawing.
*/
@property (nonatomic, strong) IMGLYBrush * _Nullable brush;
/**
  :nodoc:
*/
- (void)gestureBegan:(UIGestureRecognizer * _Nonnull)recognizer;
/**
  :nodoc:
*/
- (void)gestureMoved:(UIGestureRecognizer * _Nonnull)recognizer;
/**
  :nodoc:
*/
- (void)gestureEnded:(UIGestureRecognizer * _Nonnull)recognizer;
/**
  :nodoc:
*/
- (void)gestureCanceled:(UIGestureRecognizer * _Nonnull)recognizer;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/**
  A \code
  GradientView
  \endcode shows a linear gradient from its top to its bottom.
*/
SWIFT_CLASS_NAMED("GradientView")
@interface IMGLYGradientView : UIView
/**
  The top color of the gradient.
*/
@property (nonatomic, readonly, strong) UIColor * _Nonnull topColor;
/**
  The bottom color of the gradient.
*/
@property (nonatomic, readonly, strong) UIColor * _Nonnull bottomColor;
/**
  Creates a new gradient view.
  \param topColor The color at the top of the view.

  \param bottomColor The color at the bottom of the view.

*/
- (nonnull instancetype)initWithTopColor:(UIColor * _Nonnull)topColor bottomColor:(UIColor * _Nonnull)bottomColor OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  A class that wraps values for \code
  hue
  \endcode, \code
  saturation
  \endcode and \code
  brightness
  \endcode.
*/
SWIFT_CLASS_NAMED("HSB")
@interface IMGLYHSB : NSObject
/**
  The hue value.
*/
@property (nonatomic, readonly) CGFloat hue;
/**
  The saturation value.
*/
@property (nonatomic, readonly) CGFloat saturation;
/**
  The brightness value.
*/
@property (nonatomic, readonly) CGFloat brightness;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  The \code
  HuePickerView
  \endcode is a view that enables a user to select a hue.
*/
SWIFT_CLASS_NAMED("HuePickerView")
@interface IMGLYHuePickerView : UIView
/**
  The receiver’s delegate.
  seealso:
  \code
  HuePickerViewDelegate
  \endcode.
*/
@property (nonatomic, weak) id <IMGLYHuePickerViewDelegate> _Nullable delegate;
/**
  The currently selected hue.
*/
@property (nonatomic) CGFloat hue;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  The selected color.
*/
@property (nonatomic, strong) UIColor * _Nonnull color;
/**
  :nodoc:
*/
- (void)drawRect:(CGRect)rect;
/**
  :nodoc:
*/
- (void)layoutSubviews;
@end



/**
  An \code
  IconBorderedCollectionViewCell
  \endcode is a cell that shows a border around the cell and an image
  in its center.
*/
SWIFT_CLASS_NAMED("IconBorderedCollectionViewCell")
@interface IMGLYIconBorderedCollectionViewCell : IMGLYActivityBorderedCollectionViewCell
/**
  An image view in the center of the cell.
*/
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)prepareForReuse;
@end


/**
  An \code
  IconCaptionCollectionViewCell
  \endcode is a cell that shows an icon and a label.
*/
SWIFT_CLASS_NAMED("IconCaptionCollectionViewCell")
@interface IMGLYIconCaptionCollectionViewCell : UICollectionViewCell
/**
  An image view at the top of the cell.
*/
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/**
  A label at the bottom of the cell.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull captionLabel;
/**
  The tint color to use for the icon when the cell is not selected
*/
@property (nonatomic, strong) UIColor * _Nonnull iconTintColor;
/**
  The tint color to use for the caption when the cell is not selected
*/
@property (nonatomic, strong) UIColor * _Nonnull captionTintColor;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)tintColorDidChange;
/**
  :nodoc:
*/
- (void)prepareForReuse;
/**
  :nodoc:
*/
@property (nonatomic, setter=setSelected:) BOOL isSelected;
/**
  :nodoc:
*/
@property (nonatomic, setter=setHighlighted:) BOOL isHighlighted;
@end


/**
  An icon generator can be used to generate various icons.
*/
SWIFT_CLASS_NAMED("IconGenerator")
@interface IMGLYIconGenerator : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  \code
  LUTConverter
  \endcode creates the color cube data needed for a \code
  CIColorCube
  \endcode filter by reading the
  LUT from an identity image and an effect image and interpolating between them.
*/
SWIFT_CLASS_NAMED("LUTConverter")
@interface IMGLYLUTConverter : NSObject
/**
  The intensity by which the identity and the actual LUT should be interpolated.
*/
@property (nonatomic) float intensity;
/**
  The url of the LUT to use.
*/
@property (nonatomic, copy) NSURL * _Nullable lutURL;
/**
  The resulting color cube data. Calling this is expensive and the result should be cached.
*/
@property (nonatomic, readonly, copy) NSData * _Nullable colorCubeData;
/**
  Creates a newly allocated instance of \code
  LUTConverter
  \endcode with an identity LUT at the given URL.
  \param identityLUT The url to the identity LUT.


  returns:
  An instance of \code
  LUTConverter
  \endcode.
*/
- (nonnull instancetype)initWithIdentityLUTAtURL:(NSURL * _Nonnull)identityLUT OBJC_DESIGNATED_INITIALIZER;
/**
  This method reads an LUT image and converts it to a cube color space representation.
  The resulting data can be used to feed an CIColorCube filter, so that the transformation
  realised by the LUT is applied with a core image standard filter
*/
+ (NSData * _Nullable)colorCubeDataFromLUTAtURL:(NSURL * _Nonnull)lutURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A \code
  LabelBorderedCollectionViewCell
  \endcode is a cell that shows a border around the cell and a label
  in its center.
*/
SWIFT_CLASS_NAMED("LabelBorderedCollectionViewCell")
@interface IMGLYLabelBorderedCollectionViewCell : IMGLYBorderedCollectionViewCell
/**
  A label in the center of the cell.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull textLabel;
/**
  The tint color to use for the caption when the cell is not selected
*/
@property (nonatomic, strong) UIColor * _Nonnull textLabelTintColor;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)tintColorDidChange;
/**
  :nodoc:
*/
- (void)prepareForReuse;
/**
  :nodoc:
*/
@property (nonatomic, setter=setSelected:) BOOL isSelected;
/**
  :nodoc:
*/
@property (nonatomic, setter=setHighlighted:) BOOL isHighlighted;
@end


/**
  A \code
  LabelCaptionCollectionViewCell
  \endcode is a cell that displays two labels, one at the top and one at
  the bottom.
*/
SWIFT_CLASS_NAMED("LabelCaptionCollectionViewCell")
@interface IMGLYLabelCaptionCollectionViewCell : UICollectionViewCell
/**
  A label near the top of the cell.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull label;
/**
  A label near the bottom of the cell.
*/
@property (nonatomic, readonly, strong) UILabel * _Nonnull captionLabel;
/**
  The tint color to use for the label when the cell is not selected
*/
@property (nonatomic, strong) UIColor * _Nonnull labelTintColor;
/**
  The tint color to use for the caption when the cell is not selected
*/
@property (nonatomic, strong) UIColor * _Nonnull captionTintColor;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)tintColorDidChange;
/**
  :nodoc:
*/
- (void)prepareForReuse;
/**
  :nodoc:
*/
@property (nonatomic, setter=setSelected:) BOOL isSelected;
/**
  :nodoc:
*/
@property (nonatomic, setter=setHighlighted:) BOOL isHighlighted;
@end


/**
  A \code
  LicenseModel
  \endcode represents all properties of a license.
*/
SWIFT_CLASS("_TtC8imglyKit12LicenseModel")
@interface LicenseModel : NSObject
/**
  The owner of the license.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull owner;
/**
  The license’s signature.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull signature;
/**
  The app identifier that is registered with the license.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull appIdentifier;
/**
  The platform of this license.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
/**
  Whether or not the license is an enterprise license.
*/
@property (nonatomic, readonly) BOOL isEnterpriseLicense;
/**
  The API token that belongs to this license.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull apiToken;
/**
  A list of server domains that this license sends API requests to.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull domains;
/**
  The version of the license.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull licenseVersion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSValue;

/**
  Applies a linear focus to an instance of \code
  CIImage
  \endcode.
*/
SWIFT_CLASS_NAMED("LinearFocusFilter")
@interface IMGLYLinearFocusFilter : CIFilter
/**
  The input image.
*/
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/**
  The first normalized control point of the focus. This control point should use the coordinate system of Core Image, which means that (0,0) is at the top left.
*/
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;
/**
  The second normalized control point of the focus. This control point should use the coordinate system of Core Image, which means that (0,0) is at the top left.
*/
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;
/**
  The blur radius to use for focus. Default is 25.
*/
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;
/**
  The fade width to use for focus. Default is 0.
*/
@property (nonatomic, strong) NSNumber * _Nullable inputNormalizedFadeWidth;
/**
  :nodoc:
*/
- (void)setDefaults;
/**
  :nodoc:
*/
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionViewFlowLayout;

/**
  A \code
  MenuCollectionView
  \endcode is a subclass of \code
  UICollectionView
  \endcode configured to be used as the menu
  of a tool controller.
*/
SWIFT_CLASS_NAMED("MenuCollectionView")
@interface IMGLYMenuCollectionView : UICollectionView
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  The flow layout of the collectoin view.
*/
@property (nonatomic, readonly, strong) UICollectionViewFlowLayout * _Nonnull flowLayout;
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
@end


@interface NSError (SWIFT_EXTENSION(imglyKit))
@end


@interface NSMutableData (SWIFT_EXTENSION(imglyKit))
@end


@interface NSObject (SWIFT_EXTENSION(imglyKit))
@end

/**
  Represents the orientation of an image and has the same meaning as the corresponding EXIF value.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, IMGLYOrientation, "Orientation") {
/**
  Row 0 is at the top, column 0 is on the left.
*/
  IMGLYOrientationNormal = 1,
/**
  Row 0 is at the top, column 0 is on the right.
*/
  IMGLYOrientationFlipX = 2,
/**
  Row 0 is at the bottom, column 0 is on the right.
*/
  IMGLYOrientationRotate180 = 3,
/**
  Row 0 is at the bottom, column 0 is on the left.
*/
  IMGLYOrientationFlipY = 4,
/**
  Row 0 is on the left, column 0 is at the top.
*/
  IMGLYOrientationTransverse = 5,
/**
  Row 0 is on the right, column 0 is at the top.
*/
  IMGLYOrientationRotate90 = 6,
/**
  Row 0 is on the right, column 0 is at the bottom.
*/
  IMGLYOrientationTranspose = 7,
/**
  Row 0 is on the left, column 0 is at the bottom.
*/
  IMGLYOrientationRotate270 = 8,
};


/**
  An \code
  OverlayButton
  \endcode is used inside the \code
  workspaceView
  \endcode of a \code
  StackLayoutToolController
  \endcode. It is
  a regular button with a translucent black background.
*/
SWIFT_CLASS_NAMED("OverlayButton")
@interface IMGLYOverlayButton : IMGLYButton
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  Creates the default add button.

  returns:
  The default add button.
*/
+ (IMGLYOverlayButton * _Nonnull)makeAddButton;
/**
  Creates the default delete button.

  returns:
  The default delete button.
*/
+ (IMGLYOverlayButton * _Nonnull)makeDeleteButton;
/**
  Creates the default flip button.

  returns:
  The default flip button.
*/
+ (IMGLYOverlayButton * _Nonnull)makeFlipButton;
/**
  Creates the default straighten button.

  returns:
  The default straighten button.
*/
+ (IMGLYOverlayButton * _Nonnull)makeStraightenButton;
/**
  Creates the default bring to front button.

  returns:
  The default bring to front button.
*/
+ (IMGLYOverlayButton * _Nonnull)makeToFrontButton;
/**
  Creates the default undo button.

  returns:
  The default undo button.
*/
+ (IMGLYOverlayButton * _Nonnull)makeUndoButton;
/**
  Creates the default alignment button.

  returns:
  The default alignment button.
*/
+ (IMGLYOverlayButton * _Nonnull)makeAlignmentButton;
@end

@class IMGLYSticker;
@class IMGLYTextLabel;

/**
  An \code
  OverlayController
  \endcode manages all overlays that have been added to an image and hosts the
  overlay’s container view.
*/
SWIFT_CLASS_NAMED("OverlayController")
@interface IMGLYOverlayController : NSObject
/**
  The parent view that the container was added to.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull parentView;
/**
  The container view that hosts all overlays.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull view;
/**
  The base image. Needed for some calculations.
*/
@property (nonatomic, strong) CIImage * _Nullable baseImage;
/**
  An \code
  UIImage
  \endcode of the painting to use as an overlay.
*/
@property (nonatomic, strong) UIImage * _Nullable painting;
/**
  The image view that displays the painting.
*/
@property (nonatomic, readonly, strong) UIImageView * _Nonnull paintingImageView;
/**
  The image view that displays the frame.
*/
@property (nonatomic, readonly, strong) UIImageView * _Nonnull frameImageView;
/**
  The currently selected overlay.
*/
@property (nonatomic, strong) UIView * _Nullable selectedOverlayView;
/**
  A handler that should be called when the currently selected overlay changes.
*/
@property (nonatomic, copy) void (^ _Nullable selectionChangedHandler)(UIView * _Nullable, UIView * _Nullable);
/**
  Whether or not any overlays are added.
*/
@property (nonatomic, readonly) BOOL overlaysAdded;
/**
  Adds a sticker as an overlay.
  \param sticker The sticker that should be added.

  \param image The image of the sticker.

  \param select Whether or not the sticker should be selected after it was added.

  \param completion A completion handler to run after the sticker was added.

*/
- (void)addSticker:(IMGLYSticker * _Nonnull)sticker withImage:(UIImage * _Nonnull)image select:(BOOL)select completion:(void (^ _Nullable)(UIImageView * _Nonnull))completion;
/**
  Adds text as an overlay.
  \param text The text to add as an overlay.

  \param select Whether or not the text should be selected after it was added.

  \param completion A completion handler to run after the sticker was added.

*/
- (void)addText:(NSString * _Nonnull)text select:(BOOL)select completion:(void (^ _Nullable)(IMGLYTextLabel * _Nonnull))completion;
/**
  Adds a frame as an overlay.
  \param frame The frame to add to the image.

  \param image The image to add to the image.

  \param completion A completion handler to run after the frame was added.

*/
- (void)addFrame:(IMGLYFrame * _Nonnull)frame with:(UIImage * _Nonnull)image;
/**
  Removes the current frame as an overlay.
*/
- (void)removeFrame;
/**
  Moves the currently selected overlay to the front.
*/
- (void)bringSelectedOverlayToFront;
/**
  Moves the passed overlay to the front.
  \param overlay The overlay to move to the front.

*/
- (void)bringOverlayToFront:(UIView * _Nonnull)overlay;
/**
  Moves the painting to the front.
*/
- (void)bringPaintingToFront;
/**
  Moves the frame to the front.
*/
- (void)bringFrameToFront;
/**
  Moves the frame to the back.
*/
- (void)sendFrameToBack;
/**
  Whether or not the frame is in front of the overlays.
*/
@property (nonatomic, readonly) BOOL isFrameInFront;
/**
  Resets the rotation of the currently selected overlay.
*/
- (void)straightenSelectedOverlay;
/**
  Resets the rotation of the passed overlay.
  \param overlay The overlay to reset.

*/
- (void)straightenOverlay:(UIView * _Nonnull)overlay;
/**
  Flips the currently selected overlay horizontally.
*/
- (void)flipSelectedOverlay;
/**
  Flips the passed overlay horizontally. Currently only supports stickers.
  \param overlay The overlay to flip.

*/
- (void)flipOverlay:(UIView * _Nonnull)overlay;
/**
  Removes the currently selected overlay.
*/
- (void)removeSelectedOverlay;
/**
  Removes the currently selected overlay.
*/
- (void)removeWithOverlay:(UIView * _Nonnull)overlay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  :nodoc:
*/
SWIFT_CLASS("_TtC8imglyKit5PESDK")
@interface PESDK : NSObject
/**
  Unlocks the SDK with the given license. Calling this method prior to using any parts of the
  SDK is required and will be enforced in future versions.
  \param url The file url where the license file is located.


  returns:
  Whether or not the controller was successfully unlocked.
*/
+ (void)unlockWithLicenseAt:(NSURL * _Nonnull)url;
/**
  The shared PhotoEditor SDK configuration instance.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PESDK * _Nonnull sharedInstance;)
+ (PESDK * _Nonnull)sharedInstance;
/**
  PhotoEditor SDK analytics instance. All screen views and events are logged with this instance.
*/
@property (nonatomic, readonly, strong) IMGLYAnalytics * _Nonnull analytics;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class IMGLYTexture;
@class NSUndoManager;

/**
  A \code
  Painting
  \endcode manages the shaders, textures, vertices and framebuffers involved in a single painting.
*/
SWIFT_CLASS_NAMED("Painting")
@interface IMGLYPainting : NSObject
/**
  The canvas view that displays this painting.
*/
@property (nonatomic, weak) IMGLYCanvasView * _Nullable canvas;
/**
  The size of the painting.
*/
@property (nonatomic, readonly) CGSize dimensions;
/**
  The bounds of the painting.
*/
@property (nonatomic, readonly) CGRect bounds;
/**
  The context that this painting belongs to.
*/
@property (nonatomic, readonly, strong) EAGLContext * _Nonnull context;
/**
  The VAO that covers this painting.
*/
@property (nonatomic, readonly) GLuint quadVAO;
/**
  The brush texture that will be used to paint strokes.
*/
@property (nonatomic, strong) IMGLYTexture * _Nullable brushTexture;
/**
  An undo manager that can be used to undo drawing operations.
*/
@property (nonatomic, readonly, strong) NSUndoManager * _Nonnull undoManager;
/**
  Returns a newly initialized painting of the given size.
  \param size The size of the painting.


  returns:
  A newly initialized \code
  Painting
  \endcode object.
*/
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/**
  Clears the painting of any drawings.
*/
- (void)clear;
/**
  Preloads the texture that will be used to render drawings into.
*/
- (void)preloadPaintTexture;
/**
  Generates an image of the painting of the given size and with the given background color.
  \param size The size of the requested image.

  \param color The background color of the image.


  returns:
  An image of the painting.
*/
- (UIImage * _Nullable)imageWithSize:(CGSize)size backgroundColor:(UIColor * _Nonnull)color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A \code
  PhotoEditRenderer
  \endcode takes a \code
  CIImage
  \endcode and a \code
  PhotoEditModel
  \endcode as input and takes care of
  applying all necessary effects and filters to the image. The output image can then be rendered
  into an \code
  EAGLContext
  \endcode or converted into a \code
  CGImage
  \endcode instance.
*/
SWIFT_CLASS_NAMED("PhotoEditRenderer")
@interface IMGLYPhotoEditRenderer : NSObject
/**
  The input image.
*/
@property (nonatomic, strong) CIImage * _Nullable originalImage;
/**
  The render mode describes which effects should be applied to the input image.
*/
@property (nonatomic) IMGLYRenderMode renderMode;
/**
  A \code
  CIImage
  \endcode instance with all effects and filters applied to it.
*/
@property (nonatomic, readonly, strong) CIImage * _Nonnull outputImage;
/**
  The size of the output image.
*/
@property (nonatomic, readonly) CGSize outputImageSize;
/**
  Applies all necessary filters and effects to the input image and converts it to an instance
  of \code
  CGImage
  \endcode.

  returns:
  A newly created instance of \code
  CGImage
  \endcode.
*/
- (CGImageRef _Nonnull)newOutputImage;
/**
  Same as \code
  newOutputImage()
  \endcode but asynchronously.
  \param completion A completion handler that receives the newly created instance of
  \code
  CGImage
  \endcode once rendering is complete.

*/
- (void)createOutputImageWithCompletion:(void (^ _Nonnull)(CGImageRef _Nonnull))completion;
/**
  Applies all necessary filters and effects to the input image and converts it to an instance
  of \code
  NSData
  \endcode with the given compression quality.
  \param compressionQuality The compression quality to apply.

  \param metadataSourceImageURL An url to the original image of which the metadata
  should be copied to the new image.

  \param completionHandler A completion handler that receives the newly created
  instance of \code
  NSData
  \endcode once rendering is complete.

*/
- (void)generateOutputImageDataWithCompressionQuality:(CGFloat)compressionQuality metadataSourceImageURL:(NSURL * _Nullable)metadataSourceImageURL completionHandler:(void (^ _Nonnull)(NSData * _Nullable, CGFloat, CGFloat))completionHandler;
/**
  Draws the output image into the given \code
  EAGLContext
  \endcode.
  \param context An instance of \code
  EAGLContext
  \endcode to draw into.

  \param rect The \code
  CGRect
  \endcode in which the output image should be drawn.

  \param viewportWidth The width of the view that displays the framebuffer’s content.

  \param viewportHeight The height of the view that displays the framebuffer’s content.

*/
- (void)drawOutputImageInContext:(EAGLContext * _Nonnull)context toRect:(CGRect)rect viewportWidth:(NSInteger)viewportWidth viewportHeight:(NSInteger)viewportHeight;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYPhotoEditRenderer (SWIFT_EXTENSION(imglyKit))
/**
  The photo edit model that describes all effects that should be applied to the input image.
*/
@property (nonatomic, strong) IMGLYBoxedPhotoEditModel * _Nonnull boxedPhotoEditModel;
@end



@interface IMGLYPhotoEditToolController (SWIFT_EXTENSION(imglyKit))
@end


/**
  The \code
  PhotoEditToolControllerDelegate
  \endcode protocol defines methods that allow you respond to the events of an instance of \code
  PhotoEditToolController
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("PhotoEditToolControllerDelegate")
@protocol IMGLYPhotoEditToolControllerDelegate
/**
  The photo edit renderer that is being used.
  \param photoEditToolController The photo edit tool controller that is asking for the renderer.


  returns:
  An instance of \code
  PhotoEditRenderer
  \endcode.
*/
- (IMGLYPhotoEditRenderer * _Nullable)photoEditToolControllerMainRenderer:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  The base image that is being edited.
  \param photoEditToolController The photo edit tool controller that is asking for the base image.


  returns:
  An instance of \code
  UIImage
  \endcode.
*/
- (UIImage * _Nullable)photoEditToolControllerBaseImage:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  The base CIImage that is being edited.
  \param photoEditToolController The photo edit tool controller that is asking for the base image.


  returns:
  An instance of \code
  CIImage
  \endcode.
*/
- (CIImage * _Nullable)photoEditToolControllerBaseCIImage:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  The preview view that shows the edited image.
  \param photoEditToolController The photo edit tool controller that is asking for the preview view.


  returns:
  An instance of \code
  UIView
  \endcode.
*/
- (UIView * _Nullable)photoEditToolControllerPreviewView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  The scrolling container that hosts the preview view.
  \param photoEditToolController The photo edit tool controller that is asking for the scrolling container.


  returns:
  An instance of \code
  UIScrollView
  \endcode.
*/
- (UIScrollView * _Nullable)photoEditToolControllerPreviewViewScrollingContainer:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  The image view that is used to display the painting over the output image.
  \param photoEditToolController The photo edit tool controller that is asking for the image view.


  returns:
  An instance of \code
  UIImageView
  \endcode.
*/
- (UIImageView * _Nullable)photoEditToolControllerPaintingImageView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  Called when the tool finishes editing.
  \param photoEditToolController The photo edit view controller that finished editing.

*/
- (void)photoEditToolControllerDidFinish:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  Called when the tool discards its changes.
  \param photoEditToolController The photo edit tool controller that discarded its changes.

*/
- (void)photoEditToolControllerDidCancel:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  Called when the tool updates its photo edit model.
  \param photoEditToolController The photo edit tool controller that updated its photo edit model.

*/
- (void)photoEditToolControllerDidUpdatePhotoEditModel:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  Called when the tool changes its preferred rendering mode.
  \param photoEditToolController The photo edit tool controller that changed its preferred rendering mode.

*/
- (void)photoEditToolControllerDidChangePreferredRenderMode:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  Called when the tool changes whether or not it wants a default preview.
  \param photoEditToolController The photo edit tool controller that changed whether or not the default preview should be visible.

*/
- (void)photoEditToolControllerDidChangeWantsDefaultPreviewView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  Called when the tool changes its preferred preview view insets.
  \param photoEditToolController The photo edit tool controller that updated its photo edit model.

  \param animated Whether or not to animate this change.

*/
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/**
  Called when the tool wants to present another tool on top of it.
  \param photoEditToolController The photo edit tool controller that wants to present another tool.

  \param toolController The tool that should be presented.

*/
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didSelectToolController:(IMGLYPhotoEditToolController * _Nonnull)toolController;
/**
  The overlay controller that manages overlays and hosts the overlay container view.
  \param photoEditToolController The photo edit tool controller that is asking for the controller.


  returns:
  An overlay controller.
*/
- (IMGLYOverlayController * _Nullable)photoEditToolControllerOverlayController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
@end


/**
  A \code
  PhotoEditViewController
  \endcode is responsible for presenting and rendering an edited image.
*/
SWIFT_CLASS_NAMED("PhotoEditViewController")
@interface IMGLYPhotoEditViewController : UIViewController
/**
  The scroll view that hosts the preview view.
*/
@property (nonatomic, readonly, strong) UIScrollView * _Nullable previewViewScrollingContainer;
/**
  The preview view that renders the preview image.
*/
@property (nonatomic, readonly, strong) GLKView * _Nullable mainPreviewView;
/**
  The toolbar item for this controller.
  seealso:
  \code
  ToolbarItem
  \endcode.
*/
@property (nonatomic, readonly, strong) IMGLYToolbarItem * _Nonnull toolbarItem;
/**
  The controller that manages overlays and hosts the overlay container view.
*/
@property (nonatomic, readonly, strong) IMGLYOverlayController * _Nullable overlayController;
/**
  The identifier of the photo effect to apply to the photo immediately. This is useful if you
  pass a photo that already has an effect applied by the \code
  CameraViewController
  \endcode. Note that you
  must set this property before presenting the view controller.
*/
@property (nonatomic, copy) NSString * _Nullable initialPhotoEffectIdentifier;
- (NSString * _Nullable)initialPhotoEffectIdentifier SWIFT_METHOD_FAMILY(none);
/**
  The delegate for this photo edit view controller. You should set this delegate to respond to
  save events and errors.
*/
@property (nonatomic, weak) id <IMGLYPhotoEditViewControllerDelegate> _Nullable delegate;
/**
  The currently active tool controller, if any.
*/
@property (nonatomic, readonly, strong) IMGLYPhotoEditToolController * _Nullable activeTool;
/**
  Creates a newly initialized photo edit view controller for the given data object with a
  default configuration. The data object should represent an image either in JPG or PNG
  format. Use this initializer to preserve EXIF data.
  \param data The data of the photo to edit, either in JPG or PNG format.

*/
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data;
/**
  Creates a newly initialized photo edit view controller for the given photo with a default
  configuration.
  \param photo The photo to edit.

*/
- (nonnull instancetype)initWithPhoto:(UIImage * _Nonnull)photo;
/**
  Creates a newly initialized photo edit view controller for the given photo with the given
  configuration options.
  \param photo The photo to edit.

  \param configuration The configuration options to apply.

*/
- (nonnull instancetype)initWithPhoto:(UIImage * _Nonnull)photo configuration:(IMGLYConfiguration * _Nonnull)configuration;
/**
  Creates a newly initialized photo edit view controller for the given data object with the
  given configuration. The data object should represent an image either in JPG or PNG
  format. Use this initializer to preserve EXIF data.
  \param data The data of the photo to edit, either in JPG or PNG format.

  \param configuration The configuration options to apply.

*/
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data configuration:(IMGLYConfiguration * _Nonnull)configuration;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewWillAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidLayoutSubviews;
/**
  :nodoc:
*/
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/**
  :nodoc:
*/
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/**
  :nodoc:
*/
- (void)updateViewConstraints;
/**
  Applies all changes to the photo and passes the edited image to the \code
  delegate
  \endcode.
  \param sender The object that initiated the request.

*/
- (void)save:(id _Nullable)sender;
/**
  Discards all changes to the photo and calls the \code
  delegate
  \endcode.
  \param sender The object that initiated the request.

*/
- (void)cancel:(id _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit))
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit))
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit))
/**
  Creates a photo edit view controller with the given boxed menu items.
  This initializer should only be used with Objective-C.
  \param photo The photo to edit.

  \param menuItems The menu items to display.

  \param configuration The configuration options to apply.

*/
- (nonnull instancetype)initWithPhoto:(UIImage * _Nonnull)photo menuItems:(NSArray<IMGLYBoxedMenuItem *> * _Nonnull)menuItems configuration:(IMGLYConfiguration * _Nonnull)configuration;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <GLKViewDelegate>
/**
  :nodoc:
*/
- (void)glkView:(GLKView * _Nonnull)view drawInRect:(CGRect)rect;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate, UICollectionViewDelegateFlowLayout>
/**
  :nodoc:
*/
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  :nodoc:
*/
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <UIScrollViewDelegate>
/**
  :nodoc:
*/
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
/**
  :nodoc:
*/
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
/**
  :nodoc:
*/
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <IMGLYPhotoEditToolControllerDelegate>
/**
  :nodoc:
*/
- (IMGLYPhotoEditRenderer * _Nullable)photoEditToolControllerMainRenderer:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  :nodoc:
*/
- (UIImage * _Nullable)photoEditToolControllerBaseImage:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  :nodoc:
*/
- (CIImage * _Nullable)photoEditToolControllerBaseCIImage:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  :nodoc:
*/
- (UIScrollView * _Nullable)photoEditToolControllerPreviewViewScrollingContainer:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  :nodoc:
*/
- (UIView * _Nullable)photoEditToolControllerPreviewView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  :nodoc:
*/
- (UIImageView * _Nullable)photoEditToolControllerPaintingImageView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  :nodoc:
*/
- (void)photoEditToolControllerDidFinish:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  :nodoc:
*/
- (void)photoEditToolControllerDidCancel:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  :nodoc:
*/
- (void)photoEditToolControllerDidUpdatePhotoEditModel:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  :nodoc:
*/
- (void)photoEditToolControllerDidChangePreferredRenderMode:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  :nodoc:
*/
- (void)photoEditToolControllerDidChangeWantsDefaultPreviewView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
/**
  :nodoc:
*/
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didChangePreferredPreviewViewInsetsAnimated:(BOOL)animated;
/**
  :nodoc:
*/
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didSelectToolController:(IMGLYPhotoEditToolController * _Nonnull)toolController;
/**
  :nodoc:
*/
- (IMGLYOverlayController * _Nullable)photoEditToolControllerOverlayController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
@end



/**
  Options for configuring a \code
  PhotoEditViewController
  \endcode.
*/
SWIFT_CLASS_NAMED("PhotoEditViewControllerOptions")
@interface IMGLYPhotoEditViewControllerOptions : NSObject
/**
  A configuration closure to configure the toolbars title view.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/**
  The main view’s background color. Defaults to the configuration’s global background color.
*/
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/**
  The background color of the accessory view. Defaults to the configuration’s global background color.
*/
@property (nonatomic, readonly, strong) UIColor * _Nullable accessoryViewBackgroundColor;
/**
  A configuration closure to configure the apply button displayed at the bottom right.
  Defaults to a checkmark icon.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable applyButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  A configuration closure to configure the discard button displayed at the bottom left.
  Defaults to a cross icon.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable discardButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Controls if the user can zoom the preview image. Defaults to \code
  true
  \endcode.
*/
@property (nonatomic, readonly) BOOL allowsPreviewImageZoom;
/**
  Sets the frame scaling behaviour. Defaults to \code
  .ScaleAspectFit
  \endcode.
*/
@property (nonatomic, readonly) UIViewContentMode frameScaleMode;
/**
  When set to \code
  true
  \endcode, the user is forced to crop the photo to one of the given crop ratios
  before being able to use other features of the editor. The crop tool will also automatically
  be presented, if the user changes the orientation of the photo. Defaults to \code
  false
  \endcode.
*/
@property (nonatomic, readonly) BOOL forceCropMode;
/**
  The compression quality to use when creating the output image. Default is \code
  0.9
  \endcode.
*/
@property (nonatomic, readonly) CGFloat compressionQuality;
/**
  Returns a newly allocated instance of a \code
  PhotoEditViewControllerOptions
  \endcode using the default builder.

  returns:
  An instance of a \code
  PhotoEditViewControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of a \code
  PhotoEditViewControllerOptions
  \endcode using the given builder.
  \param builder A \code
  PhotoEditViewControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of a \code
  PhotoEditViewControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYPhotoEditViewControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end


/**
  The default \code
  PhotoEditViewControllerOptionsBuilder
  \endcode for \code
  PhotoEditViewControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("PhotoEditViewControllerOptionsBuilder")
@interface IMGLYPhotoEditViewControllerOptionsBuilder : NSObject
/**
  A configuration closure to configure the toolbars title view.
*/
@property (nonatomic, copy) void (^ _Nullable titleViewConfigurationClosure)(UIView * _Nonnull);
/**
  The main view’s background color. Defaults to the configuration’s global background color.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  The background color of the accessory view. Defaults to the configuration’s global background color.
*/
@property (nonatomic, strong) UIColor * _Nullable accessoryViewBackgroundColor;
/**
  A configuration closure to configure the apply button displayed at the bottom right.
  Defaults to a checkmark icon.
*/
@property (nonatomic, copy) void (^ _Nullable applyButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  A configuration closure to configure the discard button displayed at the bottom left.
  Defaults to a cross icon.
*/
@property (nonatomic, copy) void (^ _Nullable discardButtonConfigurationClosure)(IMGLYButton * _Nonnull);
/**
  Sets the frame scaling behaviour.
*/
@property (nonatomic) UIViewContentMode frameScaleMode;
/**
  When set to \code
  true
  \endcode, the user is forced to crop the photo to one of the given crop ratios
  before being able to use other features of the editor. The crop tool will also automatically
  be presented, if the user changes the orientation of the photo. Defaults to \code
  false
  \endcode.
*/
@property (nonatomic) BOOL forceCropMode;
/**
  Controls if the user can zoom the preview image. Defaults to \code
  true
  \endcode.
*/
@property (nonatomic) BOOL allowsPreviewImageZoom;
/**
  The compression quality to use when creating the output image. Default is \code
  0.9
  \endcode.
*/
@property (nonatomic) CGFloat compressionQuality;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYPhotoEditViewControllerOptionsBuilder (SWIFT_EXTENSION(imglyKit))
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding action as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationBlock)(IMGLYIconCaptionCollectionViewCell * _Nonnull, IMGLYBoxedMenuItem * _Nonnull);
/**
  This closure is called every time the user selects a menu item.
*/
@property (nonatomic, copy) void (^ _Nullable photoEditorActionSelectedBlock)(IMGLYBoxedMenuItem * _Nonnull);
@end


/**
  The \code
  PhotoEffect
  \endcode class describes an effect that can be applied to a photo.
*/
SWIFT_CLASS_NAMED("PhotoEffect")
@interface IMGLYPhotoEffect : NSObject
/**
  The identifier of the effect.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/**
  The name of the \code
  CIFilter
  \endcode that should be used to apply this effect.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable ciFilterName;
/**
  The URL of the lut image that should be used to generate a color cube. This is only used if \code
  CIFilterName
  \endcode is
  \code
  CIColorCube
  \endcode or \code
  CIColorCubeWithColorSpace
  \endcode and \code
  options
  \endcode does not include a key named \code
  inputCubeData
  \endcode.
*/
@property (nonatomic, readonly, copy) NSURL * _Nullable lutURL;
/**
  The name that is displayed to the user.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/**
  Additional options that should be passed to the \code
  CIFilter
  \endcode object that will be created when applying this effect.
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable options;
/**
  Creates a new photo effect.
  \param identifier An identifier that uniquely identifies the effect.

  \param filterName The name of the \code
  CIFilter
  \endcode that should be used to apply this effect.

  \param lutURL The URL of the lut image that should be used to generate a color cube. This is only used if \code
  filterName
  \endcode is \code
  CIColorCube
  \endcode or \code
  CIColorCubeWithColorSpace
  \endcode and \code
  options
  \endcode does not include a key named \code
  inputCubeData
  \endcode.

  \param displayName The name that is displayed to the user.

  \param options Additional options that should be passed to the \code
  CIFilter
  \endcode object that will be created when applying this effect.


  returns:
  A newly initialized \code
  PhotoEffect
  \endcode object.
*/
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier ciFilterName:(NSString * _Nullable)filterName lutURL:(NSURL * _Nullable)lutURL displayName:(NSString * _Nonnull)displayName options:(NSDictionary<NSString *, id> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a photo effect that uses a \code
  CIColorCubeWithColorSpace
  \endcode filter and the LUT at url
  \code
  lutURL
  \endcode to generate the color cube data.
  \param identifier An identifier that uniquely identifies the effect.

  \param lutURL The URL of the lut image that should be used to generate a color cube.

  \param displayName The name that is displayed to the user.


  returns:
  A newly initialized \code
  PhotoEffect
  \endcode object.
*/
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier lutURL:(NSURL * _Nullable)lutURL displayName:(NSString * _Nonnull)displayName OBJC_DESIGNATED_INITIALIZER;
/**
  Returns a new \code
  CIFilter
  \endcode object with the given name and options.
*/
@property (nonatomic, readonly, strong) CIFilter * _Nullable newEffectFilter;
/**
  Change this array to only support a subset of all available filters or to include custom
  filters. By default this array includes all available filters.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<IMGLYPhotoEffect *> * _Nonnull allEffects;)
+ (NSArray<IMGLYPhotoEffect *> * _Nonnull)allEffects;
+ (void)setAllEffects:(NSArray<IMGLYPhotoEffect *> * _Nonnull)value;
/**
  This method returns the photo effect with the given identifier if such an effect exists.
  \param identifier The identifier of the photo effect.


  returns:
  A \code
  PhotoEffect
  \endcode object.
*/
+ (IMGLYPhotoEffect * _Nullable)effectWithIdentifier:(NSString * _Nonnull)identifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A \code
  PhotoEffectThumbnailRenderer
  \endcode can be used to generate thumbnails of a given input image for
  multiple photo effects.
*/
SWIFT_CLASS_NAMED("PhotoEffectThumbnailRenderer")
@interface IMGLYPhotoEffectThumbnailRenderer : NSObject
/**
  The input image that will be used to generate the thumbnails.
*/
@property (nonatomic, readonly, strong) UIImage * _Nonnull inputImage;
/**
  Creates a photo effect thumbnail renderer with the given input image.
  \param inputImage The input image that will be used to generate the thumbnails.


  returns:
  A newly initialized \code
  PhotoEffectThumbnailRenderer
  \endcode object.
*/
- (nonnull instancetype)initWithInputImage:(UIImage * _Nonnull)inputImage OBJC_DESIGNATED_INITIALIZER;
/**
  Generates thumbnails for multiple photo effects of the given size.
  \param photoEffects The photo effects that should be used to generate thumbnails.

  \param size The size of the thumbnails.

  \param singleCompletion This handler will be called for each thumbnail that has been created successfully.

*/
- (void)generateThumbnailsForPhotoEffects:(NSArray<IMGLYPhotoEffect *> * _Nonnull)photoEffects ofSize:(CGSize)size singleCompletion:(void (^ _Nonnull)(UIImage * _Nonnull, NSInteger))singleCompletion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/**
  Applies a radial focus to an instance of \code
  CIImage
  \endcode.
*/
SWIFT_CLASS_NAMED("RadialFocusFilter")
@interface IMGLYRadialFocusFilter : CIFilter
/**
  The input image.
*/
@property (nonatomic, strong) CIImage * _Nullable inputImage;
/**
  The first normalized control point of the focus. This control point should use the coordinate system of Core Image, which means that (0,0) is at the top left.
*/
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;
/**
  The second normalized control point of the focus. This control point should use the coordinate system of Core Image, which means that (0,0) is at the top left.
*/
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;
/**
  The blur radius to use for focus. Default is 25.
*/
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;
/**
  The fade width to use for focus. Default is 0.
*/
@property (nonatomic, strong) NSNumber * _Nullable inputNormalizedFadeWidth;
/**
  :nodoc:
*/
- (void)setDefaults;
/**
  :nodoc:
*/
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/**
  The \code
  RecordingMode
  \endcode determins if a photo or a video should be recorded.
*/
typedef SWIFT_ENUM(NSInteger, RecordingMode) {
/**
  Record a Photo.
*/
  RecordingModePhoto = 0,
/**
  Record a Video.
*/
  RecordingModeVideo = 1,
};


/**
  A \code
  StampGenerator
  \endcode is responsible for generating a stamp image that is used by a brush to draw a stroke.
*/
SWIFT_CLASS_NAMED("StampGenerator")
@interface IMGLYStampGenerator : NSObject
/**
  The size of the generated stamp.
*/
@property (nonatomic) CGSize size;
/**
  The stamp image.
*/
@property (nonatomic, readonly, strong) UIImage * _Nonnull stamp;
/**
  A lower resolution version of the stamp image. This is used for the brush preview.
*/
@property (nonatomic, readonly, strong) UIImage * _Nonnull smallStamp;
/**
  The base dimension of the generated stamp image.
*/
@property (nonatomic, readonly) CGFloat baseDimension;
/**
  The bounds of the generated stamp image.
*/
@property (nonatomic, readonly) CGRect baseBounds;
/**
  The scale of the stamp image in respect to its base dimension.
*/
@property (nonatomic, readonly) CGFloat scale;
/**
  The object that acts as the delegate of the stamp generator.
*/
@property (nonatomic, weak) id <IMGLYGeneratorDelegate> _Nullable delegate;
/**
  This method should by overriden by subclasses. This is where the actual stamp image should be generated using Core Graphics.
  \param context The context to render into.

*/
- (void)renderStampInContext:(CGContextRef _Nonnull)context;
/**
  A helper method to generate a radial gradient image from white to black.
  \param hardness The hardness of the gradient.


  returns:
  A radial gradient image from white to black.
*/
- (CGImageRef _Nonnull)radialFadeWithHardness:(CGFloat)hardness;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A \code
  RoundGenerator
  \endcode generates a round stamp image with a given hardness.
*/
SWIFT_CLASS_NAMED("RoundGenerator")
@interface IMGLYRoundGenerator : IMGLYStampGenerator
/**
  The hardness of the stamp image that is being generated.
*/
@property (nonatomic) CGFloat hardness;
/**
  :nodoc:
*/
- (void)renderStampInContext:(CGContextRef _Nonnull)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A \code
  SaturationBrightnessPickerView
  \endcode is a view that can be dragged to select the saturation within
  an instance of \code
  SaturationBrightnessPickerView
  \endcode.
*/
SWIFT_CLASS_NAMED("SaturationBrightnessPickerView")
@interface IMGLYSaturationBrightnessPickerView : UIView
/**
  The receiver’s delegate.
  seealso:
  \code
  SaturationBrightnessPickerViewDelegate
  \endcode.
*/
@property (nonatomic, weak) id <IMGLYSaturationBrightnessPickerViewDelegate> _Nullable delegate;
/**
  The currently picked hue.
*/
@property (nonatomic) CGFloat hue;
/**
  The currently picked color.
*/
@property (nonatomic, strong) UIColor * _Nonnull color;
/**
  The currently picked saturation.
*/
@property (nonatomic) CGFloat saturation;
/**
  The currently picked brightness.
*/
@property (nonatomic) CGFloat brightness;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)drawRect:(CGRect)rect;
@end


@protocol IMGLYScalePickerDelegate;

/**
  A \code
  ScalePicker
  \endcode provides an UI element to pick values.
*/
SWIFT_CLASS_NAMED("ScalePicker")
@interface IMGLYScalePicker : UIView
/**
  The current value of the scale picker.
*/
@property (nonatomic) CGFloat currentValue;
/**
  The smallest pickable value.
*/
@property (nonatomic) NSInteger minValue;
/**
  The biggest pickable value.
*/
@property (nonatomic) NSInteger maxValue;
/**
  The dimensions of a tick.
*/
@property (nonatomic) CGSize tickSize;
/**
  The dimensions of the main tick. That is the tick the marks the zero-value.
*/
@property (nonatomic) CGSize mainTickSize;
/**
  The spacing between ticks.
*/
@property (nonatomic) CGFloat spaceBetweenTicks;
/**
  The color of ticks.
*/
@property (nonatomic, strong) UIColor * _Nonnull tickColor;
/**
  The color of the value label.
*/
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/**
  The color of a view that lies behind the value label. That should be the background with an alpha value.
  This view is used to improve the readability of the value label.
*/
@property (nonatomic, strong) UIColor * _Nonnull valueLabelBackgroundColor;
/**
  A delegate that informs the receiver about changes of the value.
*/
@property (nonatomic, weak) id <IMGLYScalePickerDelegate> _Nullable delegate;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)layoutSubviews;
/**
  This method will move the scale to the given value.
*/
- (void)scrollToValue:(CGFloat)value;
@end


@interface IMGLYScalePicker (SWIFT_EXTENSION(imglyKit)) <UIScrollViewDelegate>
/**
  :nodoc:
*/
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
/**
  :nodoc:
*/
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
@end


/**
  The \code
  ScalePickerDelegate
  \endcode protocol defines a set of methods you can use to receive value-change
  messages for \code
  ScalePicker
  \endcode objects.
*/
SWIFT_PROTOCOL_NAMED("ScalePickerDelegate")
@protocol IMGLYScalePickerDelegate
/**
  Called when the scale picker’s value changes.
  \param value The new value of the scale picker.

  \param scalePicker The scale picker that called this method.

*/
- (void)scalePicker:(CGFloat)value didChangeValue:(IMGLYScalePicker * _Nonnull)scalePicker;
@end


/**
  A \code
  SeparatorCollectionViewCell
  \endcode is a cell that shows a single 1 pt wide vertical line. It is
  usually used to represent a seperator between other cells.
*/
SWIFT_CLASS_NAMED("SeparatorCollectionViewCell")
@interface IMGLYSeparatorCollectionViewCell : UICollectionViewCell
/**
  A vertical line 1 pt wide line in the center of the cell.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull separator;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A Slider object is a visual control used to select a single value from a continuous range of
  values. Sliders are always displayed as horizontal bars. An indicator, or thumb, notes the
  current value of the slider and can be moved by the user to change the setting.
  A vertical indicator, or neutral point, notes the default, unchanged value of the slider.
*/
SWIFT_CLASS_NAMED("Slider")
@interface IMGLYSlider : UIControl
/**
  The color used to tint the thumb image. If no color is set, the default \code
  tintColor
  \endcode will be used.
*/
@property (nonatomic, strong) UIColor * _Nullable thumbTintColor;
/**
  The color used to tint the background color of the thumb.
*/
@property (nonatomic, strong) UIColor * _Nonnull thumbBackgroundColor;
/**
  The color used to tint the filled track. If no color is set, the default \code
  tintColor
  \endcode will be used.
*/
@property (nonatomic, strong) UIColor * _Nullable filledTrackColor;
/**
  The color used to tint the unfilled track.
*/
@property (nonatomic, strong) UIColor * _Nonnull unfilledTrackColor;
/**
  Contains the minimum value of the receiver.
*/
@property (nonatomic) CGFloat minimumValue;
/**
  Contains the maximum value of the receiver.
*/
@property (nonatomic) CGFloat maximumValue;
/**
  Contains the neutral value of the receiver.
*/
@property (nonatomic) CGFloat neutralValue;
/**
  Contains the receiver’s current value.
*/
@property (nonatomic) CGFloat value;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)accessibilityIncrement;
/**
  :nodoc:
*/
- (void)accessibilityDecrement;
/**
  :nodoc:
*/
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/**
  :nodoc:
*/
- (void)layoutSubviews;
/**
  :nodoc:
*/
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  :nodoc:
*/
- (void)tintColorDidChange;
/**
  Returns the drawing rectangle for the slider’s thumb image.
  \param bounds The bounding rectangle of the receiver.

  \param value The current value of the slider.


  returns:
  The computed drawing rectangle for the thumb image.
*/
- (CGRect)thumbRectFor:(CGRect)bounds value:(CGFloat)value;
/**
  :nodoc:
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  :nodoc:
*/
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
/**
  :nodoc:
*/
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;
/**
  :nodoc:
*/
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;
/**
  :nodoc:
*/
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
@end

@class NSAttributedString;

/**
  A SliderTooltip object is a visual element that displays a Slider’s current value above the
  thumb image while dragging.
*/
SWIFT_CLASS("_TtC8imglyKit13SliderTooltip")
@interface SliderTooltip : UIView
/**
  The background color of the tooltip.
*/
@property (nonatomic, strong) UIColor * _Nonnull tooltipColor;
/**
  The string to display in the tooltip.
*/
@property (nonatomic, strong) NSAttributedString * _Nullable attributedString;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)drawRect:(CGRect)rect;
/**
  :nodoc:
*/
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end




/**
  A \code
  Sticker
  \endcode represents a single sticker in a sticker category. Each sticker needs an image and a
  thumbnail image. If no thumbnail is provided, it is automatically generated.
*/
SWIFT_CLASS_NAMED("Sticker")
@interface IMGLYSticker : NSObject
/**
  The URL for the sticker’s full size image. This can be a file url or a remote url.
*/
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/**
  The thumbnail URL of the sticker. If this is \code
  nil
  \endcode, it will be generated
  automatically from the full size image. This can be a file url or a remote url.
*/
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailURL;
/**
  Creates a sticker with an image url and optionally a thumbnail url.
  \param imageURL The url for the sticker’s full size image.

  \param thumbnailURL The url for the sticker’s thumbnail image.

*/
- (nonnull instancetype)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nullable)thumbnailURL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  The actions that can be used in an instance of \code
  StickerOptionsToolController
  \endcode.
  <ul>
    <li>
      SelectColor:           Change the color of the sticker.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, StickerAction) {
/**
  Change the color of the sticker.
*/
  StickerActionSelectColor = 0,
};


/**
  A \code
  StickerCategory
  \endcode represents one category of stickers. Each category has a preview image and
  multiple stickers associated with it. To support accessibility you should also set its
  \code
  accessibilityLabel
  \endcode.
*/
SWIFT_CLASS_NAMED("StickerCategory")
@interface IMGLYStickerCategory : NSObject
/**
  The title of this category, e.g. ‘Toy Collection’.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/**
  The URL of the category’s preview image. This can be a file url or a remote url.
*/
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/**
  The stickers associated with this category.
*/
@property (nonatomic, readonly, copy) NSArray<IMGLYSticker *> * _Nonnull stickers;
/**
  Creates a sticker category with an image url. The associated image is automatically loaded
  when needed.
  \param title The title of this category, e.g. ‘Toy Collection’.

  \param imageURL The url for the category’s preview image.

  \param stickers The stickers to associate with this category.

*/
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title imageURL:(NSURL * _Nonnull)imageURL stickers:(NSArray<IMGLYSticker *> * _Nonnull)stickers OBJC_DESIGNATED_INITIALIZER;
/**
  Creates the default sticker categories that are shipped with the SDK.

  returns:
  An array of sticker categories.
*/
+ (NSArray<IMGLYStickerCategory *> * _Nonnull)createDefaultStickerCategories;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A sticker category data source provides the sticker categories that should be displayed in the
  sticker tool.
*/
SWIFT_CLASS_NAMED("StickerCategoryDataSource")
@interface IMGLYStickerCategoryDataSource : NSObject
/**
  The collection view of this data source.
*/
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;
/**
  The sticker categories to display.
*/
@property (nonatomic, copy) NSArray<IMGLYStickerCategory *> * _Nullable stickerCategories;
/**
  A closure that is called when the sticker categories changed.
*/
@property (nonatomic, copy) void (^ _Nullable stickerCategoriesChangedClosure)(void);
/**
  A closure that is called to modify the cell for a given sticker category.
*/
@property (nonatomic, copy) void (^ _Nullable stickerCategoryCellConfigurationClosure)(IMGLYIconBorderedCollectionViewCell * _Nonnull, IMGLYStickerCategory * _Nonnull);
/**
  The activity indicator that is displayed instead of the collection view while \code
  stickerCategories
  \endcode
  is \code
  nil
  \endcode or does not have any items.
*/
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Nonnull activityIndicator;
/**
  Creates a new sticker category data source for the given collection view.
  \param collectionView The collection view of this data source.

*/
- (nonnull instancetype)initWithCollectionView:(UICollectionView * _Nonnull)collectionView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface IMGLYStickerCategoryDataSource (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSourcePrefetching>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView prefetchItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView cancelPrefetchingForItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
@end


@interface IMGLYStickerCategoryDataSource (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/**
  A \code
  StickerCollectionViewCell
  \endcode is a cell that has an image view and an activity indicator in its
  center.
*/
SWIFT_CLASS_NAMED("StickerCollectionViewCell")
@interface IMGLYIconCollectionViewCell : UICollectionViewCell
/**
  An image view that usually shows an icon.
*/
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/**
  An activity indicator in the center of the cell.
*/
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Nonnull activityIndicator;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)prepareForReuse;
/**
  :nodoc:
*/
@property (nonatomic, setter=setSelected:) BOOL isSelected;
/**
  :nodoc:
*/
@property (nonatomic, setter=setHighlighted:) BOOL isHighlighted;
@end


/**
  A \code
  StickerColorToolController
  \endcode is responsible for displaying the UI to adjust the color of a
  sticker that has been added to an image.
*/
SWIFT_CLASS_NAMED("StickerColorToolController")
@interface IMGLYStickerColorToolController : IMGLYColorToolController
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYStickerColorToolController (SWIFT_EXTENSION(imglyKit))
/**
  :nodoc:
*/
- (void)colorPicker:(IMGLYColorPickerView * _Nonnull)colorPickerView didPickColor:(UIColor * _Nonnull)color;
@end


@interface IMGLYStickerColorToolController (SWIFT_EXTENSION(imglyKit))
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYStickerColorToolController (SWIFT_EXTENSION(imglyKit))
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/**
  Options for configuring a \code
  StickerColorToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("StickerColorToolControllerOptions")
@interface IMGLYStickerColorToolControllerOptions : IMGLYToolControllerOptions
/**
  A list of colors that is available in the text color dialog. This property is optional.
*/
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nullable availableColors;
/**
  A list of color-names that is available in the text color dialog. This property is optional.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable availableColorNames;
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding color and color name as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable colorActionButtonConfigurationClosure)(IMGLYColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);
/**
  This closure is called every time the user selects an action
*/
@property (nonatomic, readonly, copy) void (^ _Nullable colorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);
/**
  Creates a newly allocated instance of \code
  StickerColorToolControllerOptions
  \endcode using the default builder.
*/
- (nonnull instancetype)init;
/**
  Creates a newly allocated instance of \code
  StickerColorToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  StickerColorToolControllerOptions
  \endcode instance.

*/
- (nonnull instancetype)initWithBuilder:(IMGLYStickerColorToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  StickerColorToolControllerOptionsBuilder
  \endcode for \code
  StickerColorToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("StickerColorToolControllerOptionsBuilder")
@interface IMGLYStickerColorToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  A list of colors that is available in the text color dialog. This property is optional.
*/
@property (nonatomic, copy) NSArray<UIColor *> * _Nullable availableColors;
/**
  A list of color-names that is available in the text color dialog. This property is optional.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable availableColorNames;
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding color and color name as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable colorActionButtonConfigurationClosure)(IMGLYColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);
/**
  This closure is called every time the user selects an action
*/
@property (nonatomic, copy) void (^ _Nullable colorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A sticker data source provides the stickers that should be displayed in the sticker tool.
*/
SWIFT_CLASS_NAMED("StickerDataSource")
@interface IMGLYStickerDataSource : NSObject
/**
  The collection view of this data source.
*/
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;
/**
  The stickers to display.
*/
@property (nonatomic, copy) NSArray<IMGLYSticker *> * _Nullable stickers;
/**
  A closure that is called to modify the cell for a given sticker.
*/
@property (nonatomic, copy) void (^ _Nullable stickerCellConfigurationClosure)(IMGLYIconCollectionViewCell * _Nonnull, IMGLYSticker * _Nonnull);
/**
  Creates a new sticker data source for the given collection view.
  \param collectionView The collection view of this data source.

*/
- (nonnull instancetype)initWithCollectionView:(UICollectionView * _Nonnull)collectionView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface IMGLYStickerDataSource (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSourcePrefetching>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView prefetchItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView cancelPrefetchingForItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
@end


@interface IMGLYStickerDataSource (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/**
  A \code
  StickerImageView
  \endcode displays an instance of \code
  Sticker
  \endcode and provides improved support for accessibility.
*/
SWIFT_CLASS_NAMED("StickerImageView")
@interface IMGLYStickerImageView : UIImageView
/**
  The sticker that this image view should display.
*/
@property (nonatomic, readonly, strong) IMGLYSticker * _Nonnull sticker;
/**
  Called by accessibility to make the image view smaller.
*/
@property (nonatomic, copy) void (^ _Nullable decrementHandler)(void);
/**
  Called by accessibility to make the image view bigger.
*/
@property (nonatomic, copy) void (^ _Nullable incrementHandler)(void);
/**
  Called by accessibility to rotate the image view to the left.
*/
@property (nonatomic, copy) void (^ _Nullable rotateLeftHandler)(void);
/**
  Called by accessibility to rotate the image view to the right.
*/
@property (nonatomic, copy) void (^ _Nullable rotateRightHandler)(void);
/**
  This property holds the normalized center of the view within the image without any crops added.
  It is used to calculate the correct position of the sticker within the preview view.
*/
@property (nonatomic) CGPoint normalizedCenter;
/**
  Returns a newly allocated instance of \code
  StickerImageView
  \endcode with the given sticker.
  \param sticker The sticker that should be shown in this image view.


  returns:
  An instance of \code
  StickerImageView
  \endcode.
*/
- (nonnull instancetype)initWithSticker:(IMGLYSticker * _Nonnull)sticker OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)accessibilityDecrement;
/**
  :nodoc:
*/
- (void)accessibilityIncrement;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  An \code
  StickerOptionsToolController
  \endcode is reponsible for displaying the UI to edit a sticker.
*/
SWIFT_CLASS_NAMED("StickerOptionsToolController")
@interface IMGLYStickerOptionsToolController : IMGLYStackLayoutToolController
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewWillAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewWillDisappear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)updateViewConstraints;
/**
  :nodoc:
*/
- (void)photoEditModelDidChange;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYStickerOptionsToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>
/**
  :nodoc:
*/
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYStickerOptionsToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYStickerOptionsToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYStickerOptionsToolController (SWIFT_EXTENSION(imglyKit))
@end

enum StickerOverlayAction : NSInteger;

/**
  Options for configuring a \code
  StickerOptionsToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("StickerOptionsToolControllerOptions")
@interface IMGLYStickerOptionsToolControllerOptions : IMGLYToolControllerOptions
/**
  This closure is called when the user selects an action.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable stickerActionSelectedClosure)(enum StickerAction);
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding action as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum StickerAction);
/**
  This closure allows further configuration of the overlay buttons. The closure is called for
  each button and has the button and its corresponding enum value as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(IMGLYOverlayButton * _Nonnull, enum StickerOverlayAction);
/**
  This closure is called when the user selects an action.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable stickerOverlayActionSelectedClosure)(enum StickerOverlayAction);
/**
  Creates an instance of \code
  StickerOptionsToolControllerOptions
  \endcode using the default builder.
*/
- (nonnull instancetype)init;
/**
  Creates an instance of \code
  StickerOptionsToolControllerOptions
  \endcode using the given builder.
  \param builder A builder to create the options.

*/
- (nonnull instancetype)initWithBuilder:(IMGLYStickerOptionsToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  StickerOptionsToolControllerOptionsBuilder
  \endcode for \code
  StickerOptionsToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("StickerOptionsToolControllerOptionsBuilder")
@interface IMGLYStickerOptionsToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  This closure is called when the user selects an action.
*/
@property (nonatomic, copy) void (^ _Nullable stickerActionSelectedClosure)(enum StickerAction);
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding action as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum StickerAction);
/**
  This closure allows further configuration of the overlay buttons. The closure is called for
  each button and has the button and its corresponding enum value as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(IMGLYOverlayButton * _Nonnull, enum StickerOverlayAction);
/**
  This closure is called when the user selects an action.
*/
@property (nonatomic, copy) void (^ _Nullable stickerOverlayActionSelectedClosure)(enum StickerOverlayAction);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYStickerOptionsToolControllerOptionsBuilder (SWIFT_EXTENSION(imglyKit))
/**
  An array of \code
  StickerOverlayAction
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedStickerOverlayActions
  \endcode with the corresponding \code
  StickerOverlayAction
  \endcode values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedStickerOverlayActionsAsNSNumbers;
@end

/**
  The overlay actions that can be used in an instance of \code
  StickerToolControllerOptions
  \endcode.
  <ul>
    <li>
      Add:              Switch to the add sticker UI.
    </li>
    <li>
      Flip:             Flip the sticker.
    </li>
    <li>
      Straighten:       Straighten the sticker.
    </li>
    <li>
      BringToFront:     Bring the sticker to the front.
    </li>
    <li>
      Delete:           Delete the sticker.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, StickerOverlayAction) {
/**
  Switch to the add sticker UI.
*/
  StickerOverlayActionAdd = 0,
/**
  Flip the sticker.
*/
  StickerOverlayActionFlip = 1,
/**
  Straighten the sticker.
*/
  StickerOverlayActionStraighten = 2,
/**
  Bring the sticker to the front.
*/
  StickerOverlayActionBringToFront = 3,
/**
  Delete the sticker.
*/
  StickerOverlayActionDelete = 4,
};


/**
  A \code
  StickerToolController
  \endcode is reponsible for displaying the UI to add stickers to an image.
*/
SWIFT_CLASS_NAMED("StickerToolController")
@interface IMGLYStickerToolController : IMGLYStackLayoutToolController
/**
  The sticker category data source that is associated with this view controller.
*/
@property (nonatomic, strong) IMGLYStickerCategoryDataSource * _Nullable stickerCategoryDataSource;
/**
  The sticker data source that is associated with this view controller.
*/
@property (nonatomic, strong) IMGLYStickerDataSource * _Nullable stickerDataSource;
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYStickerToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate, UICollectionViewDelegateFlowLayout>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  :nodoc:
*/
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYStickerToolController (SWIFT_EXTENSION(imglyKit))
@end


/**
  Options for configuring a \code
  StickerToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("StickerToolControllerOptions")
@interface IMGLYStickerToolControllerOptions : IMGLYToolControllerOptions
/**
  This closure is called when the user adds a sticker.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable addedStickerClosure)(IMGLYSticker * _Nonnull);
/**
  This closure is called when installing the sticker category data source. You can use it
  to save a reference to the sticker category data source.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable stickerCategoryDataSourceConfigurationClosure)(IMGLYStickerCategoryDataSource * _Nonnull);
/**
  This closure allows further configuration of the sticker category buttons. The closure is called for
  each sticker category button and has the button and its corresponding sticker category as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable stickerCategoryButtonConfigurationClosure)(IMGLYIconBorderedCollectionViewCell * _Nonnull, IMGLYStickerCategory * _Nonnull);
/**
  This closure allows further configuration of the sticker buttons. The closure is called for
  each sticker button and has the button and its corresponding sticker as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable stickerButtonConfigurationClosure)(IMGLYIconCollectionViewCell * _Nonnull, IMGLYSticker * _Nonnull);
/**
  Returns a newly allocated instance of a \code
  StickersToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of a \code
  MainToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of a \code
  StickersToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  StickersToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of a \code
  StickersToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYStickerToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  StickerToolControllerOptionsBuilder
  \endcode for \code
  StickerToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("StickerToolControllerOptionsBuilder")
@interface IMGLYStickerToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  This closure is called when the user adds a sticker.
*/
@property (nonatomic, copy) void (^ _Nullable addedStickerClosure)(IMGLYSticker * _Nonnull);
/**
  This closure is called when installing the sticker category data source. You can use it
  to save a reference to the sticker category data source.
*/
@property (nonatomic, copy) void (^ _Nullable stickerCategoryDataSourceConfigurationClosure)(IMGLYStickerCategoryDataSource * _Nonnull);
/**
  This closure allows further configuration of the sticker category buttons. The closure is called for
  each sticker category button and has the button and its corresponding sticker category as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable stickerCategoryButtonConfigurationClosure)(IMGLYIconBorderedCollectionViewCell * _Nonnull, IMGLYStickerCategory * _Nonnull);
/**
  This closure allows further configuration of the sticker buttons. The closure is called for
  each sticker button and has the button and its corresponding sticker as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable stickerButtonConfigurationClosure)(IMGLYIconCollectionViewCell * _Nonnull, IMGLYSticker * _Nonnull);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/**
  The actions that can be used in an instance of \code
  TextOptionsToolController
  \endcode.
  <ul>
    <li>
      SelectFont:            Change the font of the text.
    </li>
    <li>
      SelectColor:           Change the color of the text.
    </li>
    <li>
      SelectBackgroundColor: Change the color of the text’s bounding box.
    </li>
    <li>
      Separator:             Represents a visual separator between the actions.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, TextAction) {
/**
  Change the font of the text.
*/
  TextActionSelectFont = 0,
/**
  Change the color of the text.
*/
  TextActionSelectColor = 1,
/**
  Change the color of the text’s bounding box.
*/
  TextActionSelectBackgroundColor = 2,
};


/**
  A \code
  TextButton
  \endcode is used within a \code
  FontSelectorView
  \endcode to present different fonts and their names.
*/
SWIFT_CLASS_NAMED("TextButton")
@interface IMGLYTextButton : IMGLYButton
/**
  The color of the label.
*/
@property (nonatomic, strong) UIColor * _Nonnull labelColor;
/**
  The name of the font.
*/
@property (nonatomic, copy) NSString * _Nonnull fontName;
/**
  :nodoc:
*/
@property (nonatomic) CGRect frame;
/**
  The name that is shown to the user.
*/
@property (nonatomic, copy) NSString * _Nonnull displayName;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

enum TextColorToolControllerMode : NSInteger;

/**
  A \code
  TextColorToolController
  \endcode is reponsible for displaying the UI to adjust the text color of text
  that has been added to an image.
*/
SWIFT_CLASS_NAMED("TextColorToolController")
@interface IMGLYTextColorToolController : IMGLYColorToolController
/**
  The \code
  TextColorToolControllerMode
  \endcode that this tool is handling.
*/
@property (nonatomic) enum TextColorToolControllerMode mode;
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewDidLayoutSubviews;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYTextColorToolController (SWIFT_EXTENSION(imglyKit))
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTextColorToolController (SWIFT_EXTENSION(imglyKit))
/**
  :nodoc:
*/
- (void)colorPicker:(IMGLYColorPickerView * _Nonnull)colorPickerView didPickColor:(UIColor * _Nonnull)color;
@end


@interface IMGLYTextColorToolController (SWIFT_EXTENSION(imglyKit))
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTextColorToolController (SWIFT_EXTENSION(imglyKit))
@end

/**
  The different modes that an instance of \code
  TextColorToolController
  \endcode can handle.
  <ul>
    <li>
      Foreground: The mode to handle the foreground appearance of the text.
    </li>
    <li>
      Background: The mode to handle the background appearance of the text.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, TextColorToolControllerMode) {
/**
  The mode to handle the foreground appearance of the text.
*/
  TextColorToolControllerModeForeground = 0,
/**
  The mode to handle the background appearance of the text.
*/
  TextColorToolControllerModeBackground = 1,
};


/**
  Options for configuring a \code
  TextColorToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("TextColorToolControllerOptions")
@interface IMGLYTextColorToolControllerOptions : IMGLYToolControllerOptions
/**
  This closure allows further configuration of the right dragging handle which can be used
  to resize the right side of the text’s bounding box.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable rightDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  This closure allows further configuration of the left dragging handle which can be used
  to resize the left side of the text’s bounding box.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable leftDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  A list of colors that is available in the text color dialog. This property is optional.
*/
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nullable availableFontColors;
/**
  A list of color-names that is available in the text color dialog. This property is optional.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable availableFontColorNames;
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding color and color name as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable textColorActionButtonConfigurationClosure)(IMGLYColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);
/**
  This closure is called every time the user selects an action
*/
@property (nonatomic, readonly, copy) void (^ _Nullable textColorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);
/**
  Returns a newly allocated instance of \code
  TextColorToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of \code
  TextColorToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of \code
  TextColorToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  TextColorToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of \code
  TextColorToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYTextColorToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  TextColorToolControllerOptionsBuilder
  \endcode for \code
  TextColorToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("TextColorToolControllerOptionsBuilder")
@interface IMGLYTextColorToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  This closure allows further configuration of the right dragging handle which can be used
  to resize the right side of the text’s bounding box.
*/
@property (nonatomic, copy) void (^ _Nullable rightDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  This closure allows further configuration of the left dragging handle which can be used
  to resize the left side of the text’s bounding box.
*/
@property (nonatomic, copy) void (^ _Nullable leftDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  A list of colors that is available in the text color dialog. This property is optional.
*/
@property (nonatomic, copy) NSArray<UIColor *> * _Nullable availableFontColors;
/**
  A list of color-names that is available in the text color dialog. This property is optional.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable availableFontColorNames;
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding color and color name as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable textColorActionButtonConfigurationClosure)(IMGLYColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);
/**
  This closure is called every time the user selects an action
*/
@property (nonatomic, copy) void (^ _Nullable textColorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A \code
  TextFontToolController
  \endcode is responsible for displaying the UI to adjust the font of text that
  has been added to an image.
*/
SWIFT_CLASS_NAMED("TextFontToolController")
@interface IMGLYTextFontToolController : IMGLYStackLayoutToolController
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewWillAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidLayoutSubviews;
/**
  :nodoc:
*/
@property (nonatomic, readonly) BOOL wantsScrollingInDefaultPreviewViewEnabled;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYTextFontToolController (SWIFT_EXTENSION(imglyKit)) <IMGLYFontSelectorViewDelegate>
/**
  :nodoc:
*/
- (void)fontSelectorView:(IMGLYFontSelectorView * _Nonnull)fontSelectorView didSelectFontWithName:(NSString * _Nonnull)fontName;
@end


@interface IMGLYTextFontToolController (SWIFT_EXTENSION(imglyKit))
@end


@interface IMGLYTextFontToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>
/**
  :nodoc:
*/
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYTextFontToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTextFontToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTextFontToolController (SWIFT_EXTENSION(imglyKit))
@end


/**
  Options for configuring a \code
  TextFontToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("TextFontToolControllerOptions")
@interface IMGLYTextFontToolControllerOptions : IMGLYToolControllerOptions
/**
  This closure allows further configuration of the right dragging handle which can be used
  to resize the right side of the text’s bounding box.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable rightDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  This closure allows further configuration of the left dragging handle which can be used
  to resize the left side of the text’s bounding box.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable leftDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding action as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(IMGLYLabelCaptionCollectionViewCell * _Nonnull, NSString * _Nonnull);
/**
  This closure is called every time the user selects a crop ratio.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable textFontActionSelectedClosure)(NSString * _Nonnull);
/**
  Returns a newly allocated instance of \code
  TextFontToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of \code
  TextFontToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of \code
  TextColorToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  TextColorToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of \code
  TextColorToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYTextFontToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  TextFontToolControllerOptionsBuilder
  \endcode for \code
  TextFontToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("TextFontToolControllerOptionsBuilder")
@interface IMGLYTextFontToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  This closure allows further configuration of the right dragging handle which can be used
  to resize the right side of the text’s bounding box.
*/
@property (nonatomic, copy) void (^ _Nullable rightDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  This closure allows further configuration of the left dragging handle which can be used
  to resize the left side of the text’s bounding box.
*/
@property (nonatomic, copy) void (^ _Nullable leftDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding action as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(IMGLYLabelCaptionCollectionViewCell * _Nonnull, NSString * _Nonnull);
/**
  This closure is called every time the user selects a crop ratio.
*/
@property (nonatomic, copy) void (^ _Nullable textFontActionSelectedClosure)(NSString * _Nonnull);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A \code
  TextLabel
  \endcode is used to show text that has been added to an image and provides improved support for accessibility.
*/
SWIFT_CLASS_NAMED("TextLabel")
@interface IMGLYTextLabel : UILabel
/**
  Called by accessibility to select this label.
*/
@property (nonatomic, copy) void (^ _Nullable activateHandler)(void);
/**
  Called by accessibility to make this label smaller.
*/
@property (nonatomic, copy) void (^ _Nullable decrementHandler)(void);
/**
  Called by accessibility to make this label bigger.
*/
@property (nonatomic, copy) void (^ _Nullable incrementHandler)(void);
/**
  Called by accessibility to rotate this label to the left.
*/
@property (nonatomic, copy) void (^ _Nullable rotateLeftHandler)(void);
/**
  Called by accessibility to rotate this label to the right.
*/
@property (nonatomic, copy) void (^ _Nullable rotateRightHandler)(void);
/**
  Called by accessibility to change the text of this label.
*/
@property (nonatomic, copy) void (^ _Nullable changeTextHandler)(void);
/**
  This property holds the normalized center of the view within the image without any crops added.
  It is used to calculate the correct position of the label within the preview view.
*/
@property (nonatomic) CGPoint normalizedCenter;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (BOOL)accessibilityActivate;
/**
  :nodoc:
*/
- (void)accessibilityDecrement;
/**
  :nodoc:
*/
- (void)accessibilityIncrement;
@end


/**
  A \code
  TextOptionsToolController
  \endcode is reponsible for displaying the UI to adjust text that has been added
  to an image.
*/
SWIFT_CLASS_NAMED("TextOptionsToolController")
@interface IMGLYTextOptionsToolController : IMGLYStackLayoutToolController
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewWillAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewWillDisappear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidLayoutSubviews;
/**
  :nodoc:
*/
@property (nonatomic, readonly) BOOL wantsScrollingInDefaultPreviewViewEnabled;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYTextOptionsToolController (SWIFT_EXTENSION(imglyKit))
@end


@interface IMGLYTextOptionsToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>
/**
  :nodoc:
*/
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYTextOptionsToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTextOptionsToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTextOptionsToolController (SWIFT_EXTENSION(imglyKit))
@end

enum TextOverlayAction : NSInteger;

/**
  Options for configuring a \code
  TextOptionsToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("TextOptionsToolControllerOptions")
@interface IMGLTextOptionsToolControllerOptions : IMGLYToolControllerOptions
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding action as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum TextAction);
/**
  This closure allows further configuration of the overlay actions. The closure is called for
  each overlay and has the overlay and its corresponding enum value as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable overlayButtonConfigurationClosure)(IMGLYOverlayButton * _Nonnull, enum TextOverlayAction);
/**
  This closure allows further configuration of the right dragging handle which can be used
  to resize the right side of the text’s bounding box.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable rightDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  This closure allows further configuration of the left dragging handle which can be used
  to resize the left side of the text’s bounding box.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable leftDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  This closure is called when the user selects an action.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable textActionSelectedClosure)(enum TextAction);
/**
  This closure is called when the user selects an overlay action.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable overlayActionSelectedClosure)(enum TextOverlayAction);
/**
  Returns a newly allocated instance of \code
  TextOptionsToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of \code
  TextOptionsToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of \code
  TextOptionsToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  TextOptionsToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of \code
  TextOptionsToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYTextOptionsToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  TextOptionsToolControllerOptionsBuilder
  \endcode for \code
  TextOptionsToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("TextOptionsToolControllerOptionsBuilder")
@interface IMGLYTextOptionsToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  This closure allows further configuration of the action buttons. The closure is called for
  each action button and has the button and its corresponding action as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum TextAction);
/**
  This closure allows further configuration of the overlay actions. The closure is called for
  each overlay and has the overlay and its corresponding enum value as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable overlayButtonConfigurationClosure)(IMGLYOverlayButton * _Nonnull, enum TextOverlayAction);
/**
  This closure allows further configuration of the right dragging handle which can be used
  to resize the right side of the text’s bounding box.
*/
@property (nonatomic, copy) void (^ _Nullable rightDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  This closure allows further configuration of the left dragging handle which can be used
  to resize the left side of the text’s bounding box.
*/
@property (nonatomic, copy) void (^ _Nullable leftDraggingHandleConfigurationClosure)(UIImageView * _Nonnull);
/**
  This closure is called when the user selects an action.
*/
@property (nonatomic, copy) void (^ _Nullable textActionSelectedClosure)(enum TextAction);
/**
  This closure is called when the user selects an overlay action.
*/
@property (nonatomic, copy) void (^ _Nullable overlayActionSelectedClosure)(enum TextOverlayAction);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYTextOptionsToolControllerOptionsBuilder (SWIFT_EXTENSION(imglyKit))
/**
  An array of \code
  TextAction
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedTextActions
  \endcode with the corresponding \code
  TextAction
  \endcode values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTextActionsAsNSNumbers;
/**
  An array of \code
  TextOverlayActoin
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedTextOverlayActions
  \endcode with the corresponding \code
  TextOverlayAction
  \endcode values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTextOverlayActionsAsNSNumbers;
@end

/**
  The overlay actions that can be used in an instance of \code
  TextToolControllerOptions
  \endcode.
  <ul>
    <li>
      add:              Switch to the add text UI.
    </li>
    <li>
      alignment:        Change the alignment of the text.
    </li>
    <li>
      flip:             Flip the label.
    </li>
    <li>
      straighten:       Straighten the label.
    </li>
    <li>
      bringToFront:     Bring the label to the front.
    </li>
    <li>
      delete:           Delete the label.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, TextOverlayAction) {
/**
  Switch to the add text UI.
*/
  TextOverlayActionAdd = 0,
/**
  Change the alignment of the text.
*/
  TextOverlayActionAlignment = 1,
/**
  Flip the label.
*/
  TextOverlayActionFlip = 2,
/**
  Straighten the label.
*/
  TextOverlayActionStraighten = 3,
/**
  Bring the label to the front.
*/
  TextOverlayActionBringToFront = 4,
/**
  Delete the label.
*/
  TextOverlayActionDelete = 5,
};


/**
  A \code
  TextToolController
  \endcode is reponsible for displaying the UI to add text to an image.
*/
SWIFT_CLASS_NAMED("TextToolController")
@interface IMGLYTextToolController : IMGLYPhotoEditToolController
/**
  When this property is set, the given text label will be updated instead of creating a new one.
*/
@property (nonatomic, strong) IMGLYTextLabel * _Nullable updateLabel;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)updateViewConstraints;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
@end

@class UITextView;

/**
  Options for configuring a \code
  TextToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("TextToolControllerOptions")
@interface IMGLYTextToolControllerOptions : IMGLYToolControllerOptions
/**
  Use this closure to configure the text input view.
  Defaults to an empty implementation.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable textViewConfigurationClosure)(UITextView * _Nonnull);
/**
  The title of the tool when it is used to update an existing label.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable updateTitle;
/**
  This array can used to use custom fonts within the editor.
*/
@property (nonatomic, readonly, copy) NSArray<IMGLYFont *> * _Nonnull fonts;
/**
  Returns a newly allocated instance of a \code
  MainToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of a \code
  MainToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of a \code
  TextToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  TextToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of a \code
  TextToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYTextToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  TextToolControllerOptionsBuilder
  \endcode for \code
  TextToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("TextToolControllerOptionsBuilder")
@interface IMGLYTextToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  Use this closure to configure the text input view.
*/
@property (nonatomic, copy) void (^ _Nullable textViewConfigurationClosure)(UITextView * _Nonnull);
/**
  The title of the tool when it is used to update an existing label.
*/
@property (nonatomic, copy) NSString * _Nullable updateTitle;
/**
  This array can used to use custom fonts within the editor.
*/
@property (nonatomic, copy) NSArray<IMGLYFont *> * _Nonnull fonts;
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A \code
  Texture
  \endcode manages an OpenGL texture. It is responsible for allocating and deallocting the necessary memory.
*/
SWIFT_CLASS_NAMED("Texture")
@interface IMGLYTexture : NSObject
/**
  The name of the texture.
*/
@property (nonatomic, readonly) GLuint textureName;
/**
  Returns a newly initialized texture from the given image.
  \param cgImage The image to create a texture for.

  \param forceRGB \code
  true
  \endcode if the image should be RGB, \code
  false
  \endcode otherwise.


  returns:
  A newly initialized \code
  Texture
  \endcode object.
*/
- (nonnull instancetype)initWithCgImage:(CGImageRef _Nonnull)cgImage forceRGB:(BOOL)forceRGB OBJC_DESIGNATED_INITIALIZER;
/**
  Frees all allocated OpenGL resources.
*/
- (void)freeGLResources;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface NSTimer (SWIFT_EXTENSION(imglyKit))
@end





/**
  A \code
  Toolbar
  \endcode is used inside a \code
  ToolbarController
  \endcode to display \code
  ToolbarItem
  \endcodes.
*/
SWIFT_CLASS_NAMED("Toolbar")
@interface IMGLYToolbar : UIView
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  The toolbar items that are on the toolbar item stack.
*/
@property (nonatomic, copy) NSArray<IMGLYToolbarItem *> * _Nonnull items;
/**
  Updates the items that are on the toolbar item stack.
  \param items The items to replace the toolbar item stack with.

  \param animated Whether or not to animate the change.

*/
- (void)setItems:(NSArray<IMGLYToolbarItem *> * _Nullable)items animated:(BOOL)animated;
/**
  Pushes a toolbar item onto the toolbar item stack.
  \param item The item to push onto the stack.

  \param animated Whether or not to animate the change.

*/
- (void)pushToolbarItem:(IMGLYToolbarItem * _Nonnull)item animated:(BOOL)animated;
/**
  Pops the top toolbar item from the toolbar item stack.
  \param animated Whether or not to animate the change.


  returns:
  The toolbar item that was popped from the stack, if any.
*/
- (IMGLYToolbarItem * _Nullable)popToolbarItemAnimated:(BOOL)animated;
@end


/**
  A \code
  ToolbarButton
  \endcode should be used within an instance of \code
  Toolbar
  \endcode. It automatically styles itself
  to display touch events.
*/
SWIFT_CLASS_NAMED("ToolbarButton")
@interface IMGLYToolbarButton : IMGLYButton
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)layoutSubviews;
/**
  :nodoc:
*/
@property (nonatomic, setter=setEnabled:) BOOL isEnabled;
/**
  :nodoc:
*/
- (void)setEnabled:(BOOL)enabled animated:(BOOL)animated;
/**
  :nodoc:
*/
- (void)tintColorDidChange;
@end


/**
  A \code
  ToolbarController
  \endcode is the container view controller for a \code
  PhotoEditViewController
  \endcode and its
  associated tool controllers. It usually displays a toolbar at bottom and has methods to transition
  between various tools. If it is embedded inside a \code
  UINavigationController
  \endcode it uses the navigation
  controllers navigation bar instead of its own toolbar at the bottom.
*/
SWIFT_CLASS_NAMED("ToolbarController")
@interface IMGLYToolbarController : UIViewController
/**
  The toolbar of this controller.
*/
@property (nonatomic, readonly, strong) IMGLYToolbar * _Nonnull toolbar;
/**
  The view controllers that are currently on the stack of the toolbar controller.
*/
@property (nonatomic, readonly, copy) NSArray<UIViewController *> * _Nonnull viewControllers;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)willMoveToParentViewController:(UIViewController * _Nullable)parent;
/**
  :nodoc:
*/
- (void)viewWillAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewWillDisappear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidDisappear:(BOOL)animated;
/**
  :nodoc:
*/
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
/**
  :nodoc:
*/
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarHidden;
/**
  :nodoc:
*/
- (void)updateViewConstraints;
/**
  :nodoc:
*/
@property (nonatomic, readonly) BOOL shouldAutomaticallyForwardAppearanceMethods;
/**
  :nodoc:
*/
- (void)showViewController:(UIViewController * _Nonnull)vc sender:(id _Nullable)sender;
/**
  Pushes a view controller on the stack and presents its view.
  \param viewController The view controller to push.

  \param animated Whether or not to animate the transition.

  \param completion A completion handler to execute after the transition.

*/
- (void)pushViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/**
  Pops the top view controller from the stack and removes its view.
  \param animated Whether or not to animate the transition.

  \param completion A completion handler to execute after the transition.


  returns:
  The view controller that was popped from the stack, if any.
*/
- (UIViewController * _Nullable)popViewControllerAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
@end



/**
  A TooltipSlider object is a visual control used to select a single value from a continuous range of
  values. Sliders are always displayed as horizontal bars. An indicator, or thumb, notes the
  current value of the slider and can be moved by the user to change the setting.
  A vertical indicator, or neutral point, notes the default, unchanged value of the slider.
  Additionally a \code
  TooltipSlider
  \endcode also presents a tooltip above the thumb image that displays the current
  selected value while dragging.
*/
SWIFT_CLASS("_TtC8imglyKit13TooltipSlider")
@interface TooltipSlider : IMGLYSlider
/**
  The tooltip that is displayed above the thumb image.
*/
@property (nonatomic, readonly, strong) SliderTooltip * _Nonnull tooltip;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)layoutSubviews;
/**
  :nodoc:
*/
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;
/**
  :nodoc:
*/
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
@end


/**
  A \code
  TouchingGestureRecognizer
  \endcode is a simple \code
  UIGestureRecognizer
  \endcode subclass that counts the number
  of touches on the associated view.
*/
SWIFT_CLASS_NAMED("TouchingGestureRecognizer")
@interface IMGLYTouchingGestureRecognizer : UIGestureRecognizer
/**
  :nodoc:
*/
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/**
  :nodoc:
*/
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/**
  :nodoc:
*/
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/**
  :nodoc:
*/
- (void)reset;
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
@end

/**
  Describes all available transform actions.
*/
typedef SWIFT_ENUM(NSInteger, TransformAction) {
/**
  Rotate the image to the left.
*/
  TransformActionRotateLeft = 0,
/**
  Flip the image horizontally.
*/
  TransformActionFlipHorizontally = 1,
/**
  Straightens the image.
*/
  TransformActionStraighten = 2,
};


/**
  A \code
  TransformToolController
  \endcode is reponsible for displaying the UI to transform an image.
*/
SWIFT_CLASS_NAMED("TransformToolController")
@interface IMGLYTransformToolController : IMGLYStackLayoutToolController
/**
  :nodoc:
*/
- (void)viewDidLoad;
/**
  :nodoc:
*/
- (void)viewWillAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidAppear:(BOOL)animated;
/**
  :nodoc:
*/
- (void)viewDidLayoutSubviews;
/**
  :nodoc:
*/
- (void)updateViewConstraints;
/**
  :nodoc:
*/
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;
/**
  :nodoc:
*/
@property (nonatomic, readonly) BOOL wantsDefaultPreviewView;
- (void)willBecomeActiveTool;
/**
  :nodoc:
*/
- (void)didBecomeActiveTool;
/**
  :nodoc:
*/
- (void)willResignActiveTool;
/**
  :nodoc:
*/
- (void)didResignActiveTool;
/**
  :nodoc:
*/
- (void)photoEditModelDidChange;
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYTransformToolController (SWIFT_EXTENSION(imglyKit)) <UIGestureRecognizerDelegate>
/**
  :nodoc:
*/
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
@end


@interface IMGLYTransformToolController (SWIFT_EXTENSION(imglyKit)) <IMGLYScalePickerDelegate>
/**
  :nodoc:
*/
- (void)scalePicker:(CGFloat)value didChangeValue:(IMGLYScalePicker * _Nonnull)scalePicker;
@end


@interface IMGLYTransformToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>
/**
  :nodoc:
*/
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTransformToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>
/**
  :nodoc:
*/
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
/**
  :nodoc:
*/
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTransformToolController (SWIFT_EXTENSION(imglyKit)) <IMGLYCropAndStraightenViewDelegate>
/**
  :nodoc:
*/
- (void)cropAndStraightenViewWillBeginTracking:(IMGLYCropAndStraightenView * _Nonnull)cropAndStraightenView;
/**
  :nodoc:
*/
- (void)cropAndStraightenViewDidEndTracking:(IMGLYCropAndStraightenView * _Nonnull)cropAndStraightenView;
/**
  :nodoc:
*/
- (void)cropAndStraightenViewDidTrack:(IMGLYCropAndStraightenView * _Nonnull)cropAndStraightenView;
@end


@interface IMGLYTransformToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>
/**
  :nodoc:
*/
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
/**
  :nodoc:
*/
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
/**
  :nodoc:
*/
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTransformToolController (SWIFT_EXTENSION(imglyKit))
@end


/**
  Options for configuring a \code
  TransformToolController
  \endcode.
*/
SWIFT_CLASS_NAMED("TransformToolControllerOptions")
@interface IMGLYTransformToolControllerOptions : IMGLYToolControllerOptions
/**
  Whether to allow free cropping. If this is enabled, ‘Free’ is always the first available option.
  Defaults to \code
  true
  \endcode.
*/
@property (nonatomic, readonly) BOOL allowFreeCrop;
/**
  Defines all allowed crop aspects. The crop aspect buttons are shown in the given order.
  Defaults to \code
  1:1
  \endcode, \code
  4:3
  \endcode and \code
  16:9
  \endcode.
*/
@property (nonatomic, readonly, copy) NSArray<IMGLYCropAspect *> * _Nonnull allowedCropAspects;
/**
  This closure allows further configuration of the crop aspect buttons. The closure is called for
  each crop aspect button and has the button and its corresponding crop aspect as parameters.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable cropAspectButtonConfigurationClosure)(IMGLYLabelBorderedCollectionViewCell * _Nonnull, IMGLYCropAspect * _Nullable);
/**
  This closure is called every time the user selects a crop aspect.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable cropAspectSelectedClosure)(IMGLYCropAspect * _Nullable);
/**
  This closure allows further configuration of the transform buttons, i.e. rotate left and flip. The closure is called for
  each button and has the button and its corresponding transform action as parameters.
  The scalepicker to choose the straighten angle, has its own configuration closeure.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable transformButtonConfigurationClosure)(IMGLYButton * _Nonnull, enum TransformAction);
/**
  This closure alloes further configuration of the scale picker. This UI element is used to
  choose the straighten angle.
*/
@property (nonatomic, readonly, copy) void (^ _Nullable scalePickerConfigurationClosure)(IMGLYScalePicker * _Nonnull);
/**
  Returns a newly allocated instance of a \code
  TransformToolControllerOptions
  \endcode using the default builder.

  returns:
  An instance of a \code
  TransformToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)init;
/**
  Returns a newly allocated instance of a \code
  TransformToolControllerOptions
  \endcode using the given builder.
  \param builder A \code
  TransformToolControllerOptionsBuilder
  \endcode instance.


  returns:
  An instance of a \code
  TransformToolControllerOptions
  \endcode.
*/
- (nonnull instancetype)initWithBuilder:(IMGLYTransformToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder SWIFT_UNAVAILABLE;
@end


/**
  The default \code
  TransformToolControllerOptionsBuilder
  \endcode for \code
  TransformToolControllerOptions
  \endcode.
*/
SWIFT_CLASS_NAMED("TransformToolControllerOptionsBuilder")
@interface IMGLYTransformToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder
/**
  Whether to allow free cropping. If this is enabled, ‘Free’ is always the first available option.
  Defaults to \code
  true
  \endcode.
*/
@property (nonatomic) BOOL allowFreeCrop;
/**
  Defines all allowed crop aspects. The crop aspect buttons are shown in the given order.
  Defaults to \code
  1:1
  \endcode, \code
  4:3
  \endcode and \code
  16:9
  \endcode.
*/
@property (nonatomic, copy) NSArray<IMGLYCropAspect *> * _Nonnull allowedCropRatios;
/**
  This closure allows further configuration of the transform buttons, i.e. rotate left and flip. The closure is called for
  each button and has the button and its corresponding transform action as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable transformButtonConfigurationClosure)(IMGLYButton * _Nonnull, enum TransformAction);
/**
  An array of \code
  TransformAction
  \endcode raw values wrapped in NSNumbers.
  Setting this property overrides any previously set values in
  \code
  allowedTransformActions
  \endcode with the corresponding \code
  TransformAction
  \endcode values.
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTransformActionsAsNSNumbers;
/**
  This closure allows further configuration of the crop aspect buttons. The closure is called for
  each crop aspect button and has the button and its corresponding crop aspect as parameters.
*/
@property (nonatomic, copy) void (^ _Nullable cropAspectButtonConfigurationClosure)(IMGLYLabelBorderedCollectionViewCell * _Nonnull, IMGLYCropAspect * _Nullable);
/**
  This closure is called every time the user     /// This closure is called every time the user selects a crop aspect.
*/
@property (nonatomic, copy) void (^ _Nullable cropAspectSelectedClosure)(IMGLYCropAspect * _Nullable);
/**
  This closure alloes further configuration of the scale picker. This UI element is used to
  choose the straighten angle.
*/
@property (nonatomic, copy) void (^ _Nullable scalePickerConfigurationClosure)(IMGLYScalePicker * _Nonnull);
/**
  :nodoc:
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIApplication (SWIFT_EXTENSION(imglyKit))
@end


@interface UICollectionView (SWIFT_EXTENSION(imglyKit))
@end


@interface UICollectionViewCell (SWIFT_EXTENSION(imglyKit))
@end


@interface UIColor (SWIFT_EXTENSION(imglyKit))
@end


@interface UIColor (SWIFT_EXTENSION(imglyKit))
/**
  Returns the hue, saturation and brightness values for the receiver.
*/
@property (nonatomic, readonly, strong) IMGLYHSB * _Nonnull imgly_hsb;
@end


@interface UIImage (SWIFT_EXTENSION(imglyKit))
@end


@interface UIImage (SWIFT_EXTENSION(imglyKit))
@end


@interface UIImage (SWIFT_EXTENSION(imglyKit))
/**
  Creates a lower resolution version of an image.
  \param dimension The maximum dimension of the image.


  returns:
  A lower resolution version of an image.
*/
- (UIImage * _Nonnull)downsampleWithMaxDimension:(CGFloat)dimension;
/**
  Resizes an image to a given size with a given interpolation quality.
  \param newSize The size of the new image.

  \param quality The interpolation quality.


  returns:
  A resized image.
*/
- (UIImage * _Nonnull)resizedImageTo:(CGSize)newSize interpolationQuality:(CGInterpolationQuality)quality;
/**
  Resizes an image to a given size with a given interpolation quality, applies a transform and optionally draws the image tranposed.
  \param newSize The size of the new image.

  \param transform The transform to apply to the image.

  \param transpose \code
  true
  \endcode if the image should be drawn tranposed, \code
  false
  \endcode otherwise.

  \param quality The interpolation quality.


  returns:
  A resized and transformed image.
*/
- (UIImage * _Nonnull)resizedImageTo:(CGSize)newSize transform:(CGAffineTransform)transform drawTransposed:(BOOL)transpose interpolationQuality:(CGInterpolationQuality)quality;
/**
  Returns a copy of the image, taking into account its orientation
*/
@property (nonatomic, readonly, strong) UIImage * _Nonnull imgly_normalizedImage;
/**
  Returns a rescaled copy of the image, taking into account its orientation
  <ul>
    <li>
      discussion: The image will be scaled disproportionately if necessary to fit the bounds specified by the parameter.
    </li>
  </ul>
  \param size The size of the rescaled image.


  returns:
  The rescaled image.
*/
- (UIImage * _Nonnull)imgly_normalizedImageOfSize:(CGSize)size;
/**
  Returns a copy of the image, that has \code
  UIEdgeInsets
  \endcode set, based on the informations give within a 9 patch image.
  \param image An image must be a standard 9 patch image.


  returns:
  An image that is rescaleable based on the information given by the input image.
*/
- (UIImage * _Nonnull)imgly_resizableImageFrom9Patch:(UIImage * _Nonnull)image;
/**
  Draws the receiver’s in the given rect with the given content mode.
  \param rect The rect to draw into.

  \param contentMode The content mode to use for drawing.

*/
- (void)imgly_drawInRect:(CGRect)rect withContentMode:(UIViewContentMode)contentMode;
@end


@interface UIImageView (SWIFT_EXTENSION(imglyKit))
@end


@interface UIScrollView (SWIFT_EXTENSION(imglyKit))
@end


@interface UITableView (SWIFT_EXTENSION(imglyKit))
@end


@interface UITableViewCell (SWIFT_EXTENSION(imglyKit))
@end


@interface UIViewController (SWIFT_EXTENSION(imglyKit))
/**
  The toolbar controller that this view controller is embedded in, if any.
*/
@property (nonatomic, readonly, strong) IMGLYToolbarController * _Nullable toolbarController;
@end


@interface NSUndoManager (SWIFT_EXTENSION(imglyKit))
@end


/**
  A \code
  VideoRecordButton
  \endcode is a button that can be used to start a video recording. It animates between
  a ‘Start recording’ and a ‘Stop recording’ state.
*/
SWIFT_CLASS("_TtC8imglyKit17VideoRecordButton")
@interface VideoRecordButton : UIControl
/**
  Whether or not the button is currently in recording mode.
*/
@property (nonatomic) BOOL isRecording;
/**
  :nodoc:
*/
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
*/
- (void)layoutSubviews;
/**
  :nodoc:
*/
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;
/**
  :nodoc:
*/
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
/**
  :nodoc:
*/
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
@end

#pragma clang diagnostic pop
